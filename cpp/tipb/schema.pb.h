// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef PROTOBUF_schema_2eproto__INCLUDED
#define PROTOBUF_schema_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_schema_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTableInfoImpl();
void InitDefaultsTableInfo();
void InitDefaultsColumnInfoImpl();
void InitDefaultsColumnInfo();
void InitDefaultsIndexInfoImpl();
void InitDefaultsIndexInfo();
void InitDefaultsKeyRangeImpl();
void InitDefaultsKeyRange();
inline void InitDefaults() {
  InitDefaultsTableInfo();
  InitDefaultsColumnInfo();
  InitDefaultsIndexInfo();
  InitDefaultsKeyRange();
}
}  // namespace protobuf_schema_2eproto
namespace tipb {
class ColumnInfo;
class ColumnInfoDefaultTypeInternal;
extern ColumnInfoDefaultTypeInternal _ColumnInfo_default_instance_;
class IndexInfo;
class IndexInfoDefaultTypeInternal;
extern IndexInfoDefaultTypeInternal _IndexInfo_default_instance_;
class KeyRange;
class KeyRangeDefaultTypeInternal;
extern KeyRangeDefaultTypeInternal _KeyRange_default_instance_;
class TableInfo;
class TableInfoDefaultTypeInternal;
extern TableInfoDefaultTypeInternal _TableInfo_default_instance_;
}  // namespace tipb
namespace tipb {

// ===================================================================

class TableInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.TableInfo) */ {
 public:
  TableInfo();
  virtual ~TableInfo();

  TableInfo(const TableInfo& from);

  inline TableInfo& operator=(const TableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableInfo(TableInfo&& from) noexcept
    : TableInfo() {
    *this = ::std::move(from);
  }

  inline TableInfo& operator=(TableInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableInfo* internal_default_instance() {
    return reinterpret_cast<const TableInfo*>(
               &_TableInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TableInfo* other);
  friend void swap(TableInfo& a, TableInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TableInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableInfo& from);
  void MergeFrom(const TableInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tipb.ColumnInfo columns = 2;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 2;
  const ::tipb::ColumnInfo& columns(int index) const;
  ::tipb::ColumnInfo* mutable_columns(int index);
  ::tipb::ColumnInfo* add_columns();
  ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo >&
      columns() const;

  // optional int64 table_id = 1;
  bool has_table_id() const;
  void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::int64 table_id() const;
  void set_table_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tipb.TableInfo)
 private:
  void set_has_table_id();
  void clear_has_table_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo > columns_;
  ::google::protobuf::int64 table_id_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
  friend void ::protobuf_schema_2eproto::InitDefaultsTableInfoImpl();
};
// -------------------------------------------------------------------

class ColumnInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.ColumnInfo) */ {
 public:
  ColumnInfo();
  virtual ~ColumnInfo();

  ColumnInfo(const ColumnInfo& from);

  inline ColumnInfo& operator=(const ColumnInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColumnInfo(ColumnInfo&& from) noexcept
    : ColumnInfo() {
    *this = ::std::move(from);
  }

  inline ColumnInfo& operator=(ColumnInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnInfo* internal_default_instance() {
    return reinterpret_cast<const ColumnInfo*>(
               &_ColumnInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ColumnInfo* other);
  friend void swap(ColumnInfo& a, ColumnInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColumnInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ColumnInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ColumnInfo& from);
  void MergeFrom(const ColumnInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ColumnInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string elems = 7;
  int elems_size() const;
  void clear_elems();
  static const int kElemsFieldNumber = 7;
  const ::std::string& elems(int index) const;
  ::std::string* mutable_elems(int index);
  void set_elems(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_elems(int index, ::std::string&& value);
  #endif
  void set_elems(int index, const char* value);
  void set_elems(int index, const char* value, size_t size);
  ::std::string* add_elems();
  void add_elems(const ::std::string& value);
  #if LANG_CXX11
  void add_elems(::std::string&& value);
  #endif
  void add_elems(const char* value);
  void add_elems(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& elems() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_elems();

  // optional bytes default_val = 8;
  bool has_default_val() const;
  void clear_default_val();
  static const int kDefaultValFieldNumber = 8;
  const ::std::string& default_val() const;
  void set_default_val(const ::std::string& value);
  #if LANG_CXX11
  void set_default_val(::std::string&& value);
  #endif
  void set_default_val(const char* value);
  void set_default_val(const void* value, size_t size);
  ::std::string* mutable_default_val();
  ::std::string* release_default_val();
  void set_allocated_default_val(::std::string* default_val);

  // optional int64 column_id = 1;
  bool has_column_id() const;
  void clear_column_id();
  static const int kColumnIdFieldNumber = 1;
  ::google::protobuf::int64 column_id() const;
  void set_column_id(::google::protobuf::int64 value);

  // optional int32 tp = 2;
  bool has_tp() const;
  void clear_tp();
  static const int kTpFieldNumber = 2;
  ::google::protobuf::int32 tp() const;
  void set_tp(::google::protobuf::int32 value);

  // optional int32 collation = 3;
  bool has_collation() const;
  void clear_collation();
  static const int kCollationFieldNumber = 3;
  ::google::protobuf::int32 collation() const;
  void set_collation(::google::protobuf::int32 value);

  // optional int32 columnLen = 4;
  bool has_columnlen() const;
  void clear_columnlen();
  static const int kColumnLenFieldNumber = 4;
  ::google::protobuf::int32 columnlen() const;
  void set_columnlen(::google::protobuf::int32 value);

  // optional int32 decimal = 5;
  bool has_decimal() const;
  void clear_decimal();
  static const int kDecimalFieldNumber = 5;
  ::google::protobuf::int32 decimal() const;
  void set_decimal(::google::protobuf::int32 value);

  // optional int32 flag = 6;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 6;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // optional bool pk_handle = 21;
  bool has_pk_handle() const;
  void clear_pk_handle();
  static const int kPkHandleFieldNumber = 21;
  bool pk_handle() const;
  void set_pk_handle(bool value);

  // @@protoc_insertion_point(class_scope:tipb.ColumnInfo)
 private:
  void set_has_column_id();
  void clear_has_column_id();
  void set_has_tp();
  void clear_has_tp();
  void set_has_collation();
  void clear_has_collation();
  void set_has_columnlen();
  void clear_has_columnlen();
  void set_has_decimal();
  void clear_has_decimal();
  void set_has_flag();
  void clear_has_flag();
  void set_has_default_val();
  void clear_has_default_val();
  void set_has_pk_handle();
  void clear_has_pk_handle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> elems_;
  ::google::protobuf::internal::ArenaStringPtr default_val_;
  ::google::protobuf::int64 column_id_;
  ::google::protobuf::int32 tp_;
  ::google::protobuf::int32 collation_;
  ::google::protobuf::int32 columnlen_;
  ::google::protobuf::int32 decimal_;
  ::google::protobuf::int32 flag_;
  bool pk_handle_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
  friend void ::protobuf_schema_2eproto::InitDefaultsColumnInfoImpl();
};
// -------------------------------------------------------------------

class IndexInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.IndexInfo) */ {
 public:
  IndexInfo();
  virtual ~IndexInfo();

  IndexInfo(const IndexInfo& from);

  inline IndexInfo& operator=(const IndexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexInfo(IndexInfo&& from) noexcept
    : IndexInfo() {
    *this = ::std::move(from);
  }

  inline IndexInfo& operator=(IndexInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexInfo* internal_default_instance() {
    return reinterpret_cast<const IndexInfo*>(
               &_IndexInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IndexInfo* other);
  friend void swap(IndexInfo& a, IndexInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexInfo& from);
  void MergeFrom(const IndexInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tipb.ColumnInfo columns = 3;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 3;
  const ::tipb::ColumnInfo& columns(int index) const;
  ::tipb::ColumnInfo* mutable_columns(int index);
  ::tipb::ColumnInfo* add_columns();
  ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo >&
      columns() const;

  // optional int64 table_id = 1;
  bool has_table_id() const;
  void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::int64 table_id() const;
  void set_table_id(::google::protobuf::int64 value);

  // optional int64 index_id = 2;
  bool has_index_id() const;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 2;
  ::google::protobuf::int64 index_id() const;
  void set_index_id(::google::protobuf::int64 value);

  // optional bool unique = 4;
  bool has_unique() const;
  void clear_unique();
  static const int kUniqueFieldNumber = 4;
  bool unique() const;
  void set_unique(bool value);

  // @@protoc_insertion_point(class_scope:tipb.IndexInfo)
 private:
  void set_has_table_id();
  void clear_has_table_id();
  void set_has_index_id();
  void clear_has_index_id();
  void set_has_unique();
  void clear_has_unique();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo > columns_;
  ::google::protobuf::int64 table_id_;
  ::google::protobuf::int64 index_id_;
  bool unique_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
  friend void ::protobuf_schema_2eproto::InitDefaultsIndexInfoImpl();
};
// -------------------------------------------------------------------

class KeyRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.KeyRange) */ {
 public:
  KeyRange();
  virtual ~KeyRange();

  KeyRange(const KeyRange& from);

  inline KeyRange& operator=(const KeyRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyRange(KeyRange&& from) noexcept
    : KeyRange() {
    *this = ::std::move(from);
  }

  inline KeyRange& operator=(KeyRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyRange* internal_default_instance() {
    return reinterpret_cast<const KeyRange*>(
               &_KeyRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(KeyRange* other);
  friend void swap(KeyRange& a, KeyRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyRange* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyRange& from);
  void MergeFrom(const KeyRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes low = 1;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 1;
  const ::std::string& low() const;
  void set_low(const ::std::string& value);
  #if LANG_CXX11
  void set_low(::std::string&& value);
  #endif
  void set_low(const char* value);
  void set_low(const void* value, size_t size);
  ::std::string* mutable_low();
  ::std::string* release_low();
  void set_allocated_low(::std::string* low);

  // optional bytes high = 2;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 2;
  const ::std::string& high() const;
  void set_high(const ::std::string& value);
  #if LANG_CXX11
  void set_high(::std::string&& value);
  #endif
  void set_high(const char* value);
  void set_high(const void* value, size_t size);
  ::std::string* mutable_high();
  ::std::string* release_high();
  void set_allocated_high(::std::string* high);

  // @@protoc_insertion_point(class_scope:tipb.KeyRange)
 private:
  void set_has_low();
  void clear_has_low();
  void set_has_high();
  void clear_has_high();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr low_;
  ::google::protobuf::internal::ArenaStringPtr high_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
  friend void ::protobuf_schema_2eproto::InitDefaultsKeyRangeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TableInfo

// optional int64 table_id = 1;
inline bool TableInfo::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableInfo::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableInfo::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableInfo::clear_table_id() {
  table_id_ = GOOGLE_LONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::int64 TableInfo::table_id() const {
  // @@protoc_insertion_point(field_get:tipb.TableInfo.table_id)
  return table_id_;
}
inline void TableInfo::set_table_id(::google::protobuf::int64 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:tipb.TableInfo.table_id)
}

// repeated .tipb.ColumnInfo columns = 2;
inline int TableInfo::columns_size() const {
  return columns_.size();
}
inline void TableInfo::clear_columns() {
  columns_.Clear();
}
inline const ::tipb::ColumnInfo& TableInfo::columns(int index) const {
  // @@protoc_insertion_point(field_get:tipb.TableInfo.columns)
  return columns_.Get(index);
}
inline ::tipb::ColumnInfo* TableInfo::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.TableInfo.columns)
  return columns_.Mutable(index);
}
inline ::tipb::ColumnInfo* TableInfo::add_columns() {
  // @@protoc_insertion_point(field_add:tipb.TableInfo.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo >*
TableInfo::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:tipb.TableInfo.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo >&
TableInfo::columns() const {
  // @@protoc_insertion_point(field_list:tipb.TableInfo.columns)
  return columns_;
}

// -------------------------------------------------------------------

// ColumnInfo

// optional int64 column_id = 1;
inline bool ColumnInfo::has_column_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnInfo::set_has_column_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnInfo::clear_has_column_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnInfo::clear_column_id() {
  column_id_ = GOOGLE_LONGLONG(0);
  clear_has_column_id();
}
inline ::google::protobuf::int64 ColumnInfo::column_id() const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.column_id)
  return column_id_;
}
inline void ColumnInfo::set_column_id(::google::protobuf::int64 value) {
  set_has_column_id();
  column_id_ = value;
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.column_id)
}

// optional int32 tp = 2;
inline bool ColumnInfo::has_tp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColumnInfo::set_has_tp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColumnInfo::clear_has_tp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColumnInfo::clear_tp() {
  tp_ = 0;
  clear_has_tp();
}
inline ::google::protobuf::int32 ColumnInfo::tp() const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.tp)
  return tp_;
}
inline void ColumnInfo::set_tp(::google::protobuf::int32 value) {
  set_has_tp();
  tp_ = value;
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.tp)
}

// optional int32 collation = 3;
inline bool ColumnInfo::has_collation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColumnInfo::set_has_collation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColumnInfo::clear_has_collation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColumnInfo::clear_collation() {
  collation_ = 0;
  clear_has_collation();
}
inline ::google::protobuf::int32 ColumnInfo::collation() const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.collation)
  return collation_;
}
inline void ColumnInfo::set_collation(::google::protobuf::int32 value) {
  set_has_collation();
  collation_ = value;
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.collation)
}

// optional int32 columnLen = 4;
inline bool ColumnInfo::has_columnlen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColumnInfo::set_has_columnlen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColumnInfo::clear_has_columnlen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColumnInfo::clear_columnlen() {
  columnlen_ = 0;
  clear_has_columnlen();
}
inline ::google::protobuf::int32 ColumnInfo::columnlen() const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.columnLen)
  return columnlen_;
}
inline void ColumnInfo::set_columnlen(::google::protobuf::int32 value) {
  set_has_columnlen();
  columnlen_ = value;
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.columnLen)
}

// optional int32 decimal = 5;
inline bool ColumnInfo::has_decimal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ColumnInfo::set_has_decimal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ColumnInfo::clear_has_decimal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ColumnInfo::clear_decimal() {
  decimal_ = 0;
  clear_has_decimal();
}
inline ::google::protobuf::int32 ColumnInfo::decimal() const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.decimal)
  return decimal_;
}
inline void ColumnInfo::set_decimal(::google::protobuf::int32 value) {
  set_has_decimal();
  decimal_ = value;
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.decimal)
}

// optional int32 flag = 6;
inline bool ColumnInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ColumnInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ColumnInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ColumnInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 ColumnInfo::flag() const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.flag)
  return flag_;
}
inline void ColumnInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.flag)
}

// repeated string elems = 7;
inline int ColumnInfo::elems_size() const {
  return elems_.size();
}
inline void ColumnInfo::clear_elems() {
  elems_.Clear();
}
inline const ::std::string& ColumnInfo::elems(int index) const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.elems)
  return elems_.Get(index);
}
inline ::std::string* ColumnInfo::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.ColumnInfo.elems)
  return elems_.Mutable(index);
}
inline void ColumnInfo::set_elems(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.elems)
  elems_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ColumnInfo::set_elems(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.elems)
  elems_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ColumnInfo::set_elems(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  elems_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tipb.ColumnInfo.elems)
}
inline void ColumnInfo::set_elems(int index, const char* value, size_t size) {
  elems_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tipb.ColumnInfo.elems)
}
inline ::std::string* ColumnInfo::add_elems() {
  // @@protoc_insertion_point(field_add_mutable:tipb.ColumnInfo.elems)
  return elems_.Add();
}
inline void ColumnInfo::add_elems(const ::std::string& value) {
  elems_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tipb.ColumnInfo.elems)
}
#if LANG_CXX11
inline void ColumnInfo::add_elems(::std::string&& value) {
  elems_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tipb.ColumnInfo.elems)
}
#endif
inline void ColumnInfo::add_elems(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  elems_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tipb.ColumnInfo.elems)
}
inline void ColumnInfo::add_elems(const char* value, size_t size) {
  elems_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tipb.ColumnInfo.elems)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ColumnInfo::elems() const {
  // @@protoc_insertion_point(field_list:tipb.ColumnInfo.elems)
  return elems_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ColumnInfo::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:tipb.ColumnInfo.elems)
  return &elems_;
}

// optional bytes default_val = 8;
inline bool ColumnInfo::has_default_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnInfo::set_has_default_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnInfo::clear_has_default_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnInfo::clear_default_val() {
  default_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_val();
}
inline const ::std::string& ColumnInfo::default_val() const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.default_val)
  return default_val_.GetNoArena();
}
inline void ColumnInfo::set_default_val(const ::std::string& value) {
  set_has_default_val();
  default_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.default_val)
}
#if LANG_CXX11
inline void ColumnInfo::set_default_val(::std::string&& value) {
  set_has_default_val();
  default_val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.ColumnInfo.default_val)
}
#endif
inline void ColumnInfo::set_default_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_val();
  default_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.ColumnInfo.default_val)
}
inline void ColumnInfo::set_default_val(const void* value, size_t size) {
  set_has_default_val();
  default_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.ColumnInfo.default_val)
}
inline ::std::string* ColumnInfo::mutable_default_val() {
  set_has_default_val();
  // @@protoc_insertion_point(field_mutable:tipb.ColumnInfo.default_val)
  return default_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnInfo::release_default_val() {
  // @@protoc_insertion_point(field_release:tipb.ColumnInfo.default_val)
  clear_has_default_val();
  return default_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnInfo::set_allocated_default_val(::std::string* default_val) {
  if (default_val != NULL) {
    set_has_default_val();
  } else {
    clear_has_default_val();
  }
  default_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_val);
  // @@protoc_insertion_point(field_set_allocated:tipb.ColumnInfo.default_val)
}

// optional bool pk_handle = 21;
inline bool ColumnInfo::has_pk_handle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ColumnInfo::set_has_pk_handle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ColumnInfo::clear_has_pk_handle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ColumnInfo::clear_pk_handle() {
  pk_handle_ = false;
  clear_has_pk_handle();
}
inline bool ColumnInfo::pk_handle() const {
  // @@protoc_insertion_point(field_get:tipb.ColumnInfo.pk_handle)
  return pk_handle_;
}
inline void ColumnInfo::set_pk_handle(bool value) {
  set_has_pk_handle();
  pk_handle_ = value;
  // @@protoc_insertion_point(field_set:tipb.ColumnInfo.pk_handle)
}

// -------------------------------------------------------------------

// IndexInfo

// optional int64 table_id = 1;
inline bool IndexInfo::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexInfo::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexInfo::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexInfo::clear_table_id() {
  table_id_ = GOOGLE_LONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::int64 IndexInfo::table_id() const {
  // @@protoc_insertion_point(field_get:tipb.IndexInfo.table_id)
  return table_id_;
}
inline void IndexInfo::set_table_id(::google::protobuf::int64 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:tipb.IndexInfo.table_id)
}

// optional int64 index_id = 2;
inline bool IndexInfo::has_index_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexInfo::set_has_index_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexInfo::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexInfo::clear_index_id() {
  index_id_ = GOOGLE_LONGLONG(0);
  clear_has_index_id();
}
inline ::google::protobuf::int64 IndexInfo::index_id() const {
  // @@protoc_insertion_point(field_get:tipb.IndexInfo.index_id)
  return index_id_;
}
inline void IndexInfo::set_index_id(::google::protobuf::int64 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:tipb.IndexInfo.index_id)
}

// repeated .tipb.ColumnInfo columns = 3;
inline int IndexInfo::columns_size() const {
  return columns_.size();
}
inline void IndexInfo::clear_columns() {
  columns_.Clear();
}
inline const ::tipb::ColumnInfo& IndexInfo::columns(int index) const {
  // @@protoc_insertion_point(field_get:tipb.IndexInfo.columns)
  return columns_.Get(index);
}
inline ::tipb::ColumnInfo* IndexInfo::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.IndexInfo.columns)
  return columns_.Mutable(index);
}
inline ::tipb::ColumnInfo* IndexInfo::add_columns() {
  // @@protoc_insertion_point(field_add:tipb.IndexInfo.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo >*
IndexInfo::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:tipb.IndexInfo.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::ColumnInfo >&
IndexInfo::columns() const {
  // @@protoc_insertion_point(field_list:tipb.IndexInfo.columns)
  return columns_;
}

// optional bool unique = 4;
inline bool IndexInfo::has_unique() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexInfo::set_has_unique() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexInfo::clear_has_unique() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexInfo::clear_unique() {
  unique_ = false;
  clear_has_unique();
}
inline bool IndexInfo::unique() const {
  // @@protoc_insertion_point(field_get:tipb.IndexInfo.unique)
  return unique_;
}
inline void IndexInfo::set_unique(bool value) {
  set_has_unique();
  unique_ = value;
  // @@protoc_insertion_point(field_set:tipb.IndexInfo.unique)
}

// -------------------------------------------------------------------

// KeyRange

// optional bytes low = 1;
inline bool KeyRange::has_low() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyRange::set_has_low() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyRange::clear_has_low() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyRange::clear_low() {
  low_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_low();
}
inline const ::std::string& KeyRange::low() const {
  // @@protoc_insertion_point(field_get:tipb.KeyRange.low)
  return low_.GetNoArena();
}
inline void KeyRange::set_low(const ::std::string& value) {
  set_has_low();
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.KeyRange.low)
}
#if LANG_CXX11
inline void KeyRange::set_low(::std::string&& value) {
  set_has_low();
  low_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.KeyRange.low)
}
#endif
inline void KeyRange::set_low(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_low();
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.KeyRange.low)
}
inline void KeyRange::set_low(const void* value, size_t size) {
  set_has_low();
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.KeyRange.low)
}
inline ::std::string* KeyRange::mutable_low() {
  set_has_low();
  // @@protoc_insertion_point(field_mutable:tipb.KeyRange.low)
  return low_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyRange::release_low() {
  // @@protoc_insertion_point(field_release:tipb.KeyRange.low)
  clear_has_low();
  return low_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyRange::set_allocated_low(::std::string* low) {
  if (low != NULL) {
    set_has_low();
  } else {
    clear_has_low();
  }
  low_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), low);
  // @@protoc_insertion_point(field_set_allocated:tipb.KeyRange.low)
}

// optional bytes high = 2;
inline bool KeyRange::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyRange::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyRange::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyRange::clear_high() {
  high_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_high();
}
inline const ::std::string& KeyRange::high() const {
  // @@protoc_insertion_point(field_get:tipb.KeyRange.high)
  return high_.GetNoArena();
}
inline void KeyRange::set_high(const ::std::string& value) {
  set_has_high();
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.KeyRange.high)
}
#if LANG_CXX11
inline void KeyRange::set_high(::std::string&& value) {
  set_has_high();
  high_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.KeyRange.high)
}
#endif
inline void KeyRange::set_high(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_high();
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.KeyRange.high)
}
inline void KeyRange::set_high(const void* value, size_t size) {
  set_has_high();
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.KeyRange.high)
}
inline ::std::string* KeyRange::mutable_high() {
  set_has_high();
  // @@protoc_insertion_point(field_mutable:tipb.KeyRange.high)
  return high_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyRange::release_high() {
  // @@protoc_insertion_point(field_release:tipb.KeyRange.high)
  clear_has_high();
  return high_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyRange::set_allocated_high(::std::string* high) {
  if (high != NULL) {
    set_has_high();
  } else {
    clear_has_high();
  }
  high_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), high);
  // @@protoc_insertion_point(field_set_allocated:tipb.KeyRange.high)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tipb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_schema_2eproto__INCLUDED
