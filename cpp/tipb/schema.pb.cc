// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tipb {
class TableInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableInfo>
      _instance;
} _TableInfo_default_instance_;
class ColumnInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnInfo>
      _instance;
} _ColumnInfo_default_instance_;
class IndexInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexInfo>
      _instance;
} _IndexInfo_default_instance_;
class KeyRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyRange>
      _instance;
} _KeyRange_default_instance_;
}  // namespace tipb
namespace protobuf_schema_2eproto {
void InitDefaultsTableInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schema_2eproto::InitDefaultsColumnInfo();
  {
    void* ptr = &::tipb::_TableInfo_default_instance_;
    new (ptr) ::tipb::TableInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::TableInfo::InitAsDefaultInstance();
}

void InitDefaultsTableInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableInfoImpl);
}

void InitDefaultsColumnInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_ColumnInfo_default_instance_;
    new (ptr) ::tipb::ColumnInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::ColumnInfo::InitAsDefaultInstance();
}

void InitDefaultsColumnInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsColumnInfoImpl);
}

void InitDefaultsIndexInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schema_2eproto::InitDefaultsColumnInfo();
  {
    void* ptr = &::tipb::_IndexInfo_default_instance_;
    new (ptr) ::tipb::IndexInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::IndexInfo::InitAsDefaultInstance();
}

void InitDefaultsIndexInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIndexInfoImpl);
}

void InitDefaultsKeyRangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_KeyRange_default_instance_;
    new (ptr) ::tipb::KeyRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::KeyRange::InitAsDefaultInstance();
}

void InitDefaultsKeyRange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyRangeImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableInfo, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableInfo, columns_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, column_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, tp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, collation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, columnlen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, decimal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, elems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, default_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ColumnInfo, pk_handle_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexInfo, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexInfo, index_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexInfo, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexInfo, unique_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::KeyRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::KeyRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::KeyRange, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::KeyRange, high_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tipb::TableInfo)},
  { 9, 23, sizeof(::tipb::ColumnInfo)},
  { 32, 41, sizeof(::tipb::IndexInfo)},
  { 45, 52, sizeof(::tipb::KeyRange)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_TableInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_ColumnInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_IndexInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_KeyRange_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "schema.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014schema.proto\022\004tipb\"@\n\tTableInfo\022\020\n\010tab"
      "le_id\030\001 \001(\003\022!\n\007columns\030\002 \003(\0132\020.tipb.Colu"
      "mnInfo\"\247\001\n\nColumnInfo\022\021\n\tcolumn_id\030\001 \001(\003"
      "\022\n\n\002tp\030\002 \001(\005\022\021\n\tcollation\030\003 \001(\005\022\021\n\tcolum"
      "nLen\030\004 \001(\005\022\017\n\007decimal\030\005 \001(\005\022\014\n\004flag\030\006 \001("
      "\005\022\r\n\005elems\030\007 \003(\t\022\023\n\013default_val\030\010 \001(\014\022\021\n"
      "\tpk_handle\030\025 \001(\010\"b\n\tIndexInfo\022\020\n\010table_i"
      "d\030\001 \001(\003\022\020\n\010index_id\030\002 \001(\003\022!\n\007columns\030\003 \003"
      "(\0132\020.tipb.ColumnInfo\022\016\n\006unique\030\004 \001(\010\"%\n\010"
      "KeyRange\022\013\n\003low\030\001 \001(\014\022\014\n\004high\030\002 \001(\014B\031\n\025c"
      "om.pingcap.tidb.tipbP\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schema.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_schema_2eproto
namespace tipb {

// ===================================================================

void TableInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableInfo::kTableIdFieldNumber;
const int TableInfo::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableInfo::TableInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schema_2eproto::InitDefaultsTableInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.TableInfo)
}
TableInfo::TableInfo(const TableInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_id_ = from.table_id_;
  // @@protoc_insertion_point(copy_constructor:tipb.TableInfo)
}

void TableInfo::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = GOOGLE_LONGLONG(0);
}

TableInfo::~TableInfo() {
  // @@protoc_insertion_point(destructor:tipb.TableInfo)
  SharedDtor();
}

void TableInfo::SharedDtor() {
}

void TableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInfo::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableInfo& TableInfo::default_instance() {
  ::protobuf_schema_2eproto::InitDefaultsTableInfo();
  return *internal_default_instance();
}

TableInfo* TableInfo::New(::google::protobuf::Arena* arena) const {
  TableInfo* n = new TableInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.TableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  table_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.TableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 table_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_table_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tipb.ColumnInfo columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.TableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.TableInfo)
  return false;
#undef DO_
}

void TableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.TableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->table_id(), output);
  }

  // repeated .tipb.ColumnInfo columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.TableInfo)
}

::google::protobuf::uint8* TableInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.TableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->table_id(), target);
  }

  // repeated .tipb.ColumnInfo columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.TableInfo)
  return target;
}

size_t TableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.TableInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.ColumnInfo columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  // optional int64 table_id = 1;
  if (has_table_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TableInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.TableInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.TableInfo)
    MergeFrom(*source);
  }
}

void TableInfo::MergeFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.has_table_id()) {
    set_table_id(from.table_id());
  }
}

void TableInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfo::CopyFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {
  return true;
}

void TableInfo::Swap(TableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableInfo::InternalSwap(TableInfo* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(table_id_, other->table_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableInfo::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnInfo::kColumnIdFieldNumber;
const int ColumnInfo::kTpFieldNumber;
const int ColumnInfo::kCollationFieldNumber;
const int ColumnInfo::kColumnLenFieldNumber;
const int ColumnInfo::kDecimalFieldNumber;
const int ColumnInfo::kFlagFieldNumber;
const int ColumnInfo::kElemsFieldNumber;
const int ColumnInfo::kDefaultValFieldNumber;
const int ColumnInfo::kPkHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnInfo::ColumnInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schema_2eproto::InitDefaultsColumnInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.ColumnInfo)
}
ColumnInfo::ColumnInfo(const ColumnInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  default_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_val()) {
    default_val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_val_);
  }
  ::memcpy(&column_id_, &from.column_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pk_handle_) -
    reinterpret_cast<char*>(&column_id_)) + sizeof(pk_handle_));
  // @@protoc_insertion_point(copy_constructor:tipb.ColumnInfo)
}

void ColumnInfo::SharedCtor() {
  _cached_size_ = 0;
  default_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&column_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pk_handle_) -
      reinterpret_cast<char*>(&column_id_)) + sizeof(pk_handle_));
}

ColumnInfo::~ColumnInfo() {
  // @@protoc_insertion_point(destructor:tipb.ColumnInfo)
  SharedDtor();
}

void ColumnInfo::SharedDtor() {
  default_val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnInfo::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnInfo& ColumnInfo::default_instance() {
  ::protobuf_schema_2eproto::InitDefaultsColumnInfo();
  return *internal_default_instance();
}

ColumnInfo* ColumnInfo::New(::google::protobuf::Arena* arena) const {
  ColumnInfo* n = new ColumnInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.ColumnInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!default_val_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*default_val_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&column_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pk_handle_) -
        reinterpret_cast<char*>(&column_id_)) + sizeof(pk_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.ColumnInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 column_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_column_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &column_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 collation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_collation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 columnLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_columnlen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columnlen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 decimal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_decimal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decimal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string elems = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_elems()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->elems(this->elems_size() - 1).data(),
            static_cast<int>(this->elems(this->elems_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tipb.ColumnInfo.elems");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes default_val = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_default_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pk_handle = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_pk_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pk_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.ColumnInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.ColumnInfo)
  return false;
#undef DO_
}

void ColumnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.ColumnInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 column_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->column_id(), output);
  }

  // optional int32 tp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tp(), output);
  }

  // optional int32 collation = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->collation(), output);
  }

  // optional int32 columnLen = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->columnlen(), output);
  }

  // optional int32 decimal = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decimal(), output);
  }

  // optional int32 flag = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->flag(), output);
  }

  // repeated string elems = 7;
  for (int i = 0, n = this->elems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->elems(i).data(), static_cast<int>(this->elems(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tipb.ColumnInfo.elems");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->elems(i), output);
  }

  // optional bytes default_val = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->default_val(), output);
  }

  // optional bool pk_handle = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->pk_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.ColumnInfo)
}

::google::protobuf::uint8* ColumnInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.ColumnInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 column_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->column_id(), target);
  }

  // optional int32 tp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tp(), target);
  }

  // optional int32 collation = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->collation(), target);
  }

  // optional int32 columnLen = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->columnlen(), target);
  }

  // optional int32 decimal = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decimal(), target);
  }

  // optional int32 flag = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->flag(), target);
  }

  // repeated string elems = 7;
  for (int i = 0, n = this->elems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->elems(i).data(), static_cast<int>(this->elems(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tipb.ColumnInfo.elems");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->elems(i), target);
  }

  // optional bytes default_val = 8;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->default_val(), target);
  }

  // optional bool pk_handle = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->pk_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.ColumnInfo)
  return target;
}

size_t ColumnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.ColumnInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string elems = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->elems_size());
  for (int i = 0, n = this->elems_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->elems(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes default_val = 8;
    if (has_default_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->default_val());
    }

    // optional int64 column_id = 1;
    if (has_column_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->column_id());
    }

    // optional int32 tp = 2;
    if (has_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tp());
    }

    // optional int32 collation = 3;
    if (has_collation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collation());
    }

    // optional int32 columnLen = 4;
    if (has_columnlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->columnlen());
    }

    // optional int32 decimal = 5;
    if (has_decimal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decimal());
    }

    // optional int32 flag = 6;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional bool pk_handle = 21;
    if (has_pk_handle()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.ColumnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.ColumnInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.ColumnInfo)
    MergeFrom(*source);
  }
}

void ColumnInfo::MergeFrom(const ColumnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.ColumnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elems_.MergeFrom(from.elems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_default_val();
      default_val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_val_);
    }
    if (cached_has_bits & 0x00000002u) {
      column_id_ = from.column_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tp_ = from.tp_;
    }
    if (cached_has_bits & 0x00000008u) {
      collation_ = from.collation_;
    }
    if (cached_has_bits & 0x00000010u) {
      columnlen_ = from.columnlen_;
    }
    if (cached_has_bits & 0x00000020u) {
      decimal_ = from.decimal_;
    }
    if (cached_has_bits & 0x00000040u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      pk_handle_ = from.pk_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.ColumnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnInfo::CopyFrom(const ColumnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.ColumnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnInfo::IsInitialized() const {
  return true;
}

void ColumnInfo::Swap(ColumnInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnInfo::InternalSwap(ColumnInfo* other) {
  using std::swap;
  elems_.InternalSwap(&other->elems_);
  default_val_.Swap(&other->default_val_);
  swap(column_id_, other->column_id_);
  swap(tp_, other->tp_);
  swap(collation_, other->collation_);
  swap(columnlen_, other->columnlen_);
  swap(decimal_, other->decimal_);
  swap(flag_, other->flag_);
  swap(pk_handle_, other->pk_handle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnInfo::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexInfo::kTableIdFieldNumber;
const int IndexInfo::kIndexIdFieldNumber;
const int IndexInfo::kColumnsFieldNumber;
const int IndexInfo::kUniqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexInfo::IndexInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schema_2eproto::InitDefaultsIndexInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.IndexInfo)
}
IndexInfo::IndexInfo(const IndexInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&table_id_, &from.table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(unique_));
  // @@protoc_insertion_point(copy_constructor:tipb.IndexInfo)
}

void IndexInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(unique_));
}

IndexInfo::~IndexInfo() {
  // @@protoc_insertion_point(destructor:tipb.IndexInfo)
  SharedDtor();
}

void IndexInfo::SharedDtor() {
}

void IndexInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexInfo::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexInfo& IndexInfo::default_instance() {
  ::protobuf_schema_2eproto::InitDefaultsIndexInfo();
  return *internal_default_instance();
}

IndexInfo* IndexInfo::New(::google::protobuf::Arena* arena) const {
  IndexInfo* n = new IndexInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.IndexInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&table_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unique_) -
        reinterpret_cast<char*>(&table_id_)) + sizeof(unique_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.IndexInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 table_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_table_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 index_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_index_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tipb.ColumnInfo columns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unique = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_unique();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.IndexInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.IndexInfo)
  return false;
#undef DO_
}

void IndexInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.IndexInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->table_id(), output);
  }

  // optional int64 index_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index_id(), output);
  }

  // repeated .tipb.ColumnInfo columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columns(static_cast<int>(i)), output);
  }

  // optional bool unique = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unique(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.IndexInfo)
}

::google::protobuf::uint8* IndexInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.IndexInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->table_id(), target);
  }

  // optional int64 index_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index_id(), target);
  }

  // repeated .tipb.ColumnInfo columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // optional bool unique = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unique(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.IndexInfo)
  return target;
}

size_t IndexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.IndexInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.ColumnInfo columns = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->table_id());
    }

    // optional int64 index_id = 2;
    if (has_index_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index_id());
    }

    // optional bool unique = 4;
    if (has_unique()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.IndexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.IndexInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.IndexInfo)
    MergeFrom(*source);
  }
}

void IndexInfo::MergeFrom(const IndexInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.IndexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      table_id_ = from.table_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      index_id_ = from.index_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unique_ = from.unique_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.IndexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexInfo::CopyFrom(const IndexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.IndexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexInfo::IsInitialized() const {
  return true;
}

void IndexInfo::Swap(IndexInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexInfo::InternalSwap(IndexInfo* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(table_id_, other->table_id_);
  swap(index_id_, other->index_id_);
  swap(unique_, other->unique_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexInfo::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyRange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyRange::kLowFieldNumber;
const int KeyRange::kHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyRange::KeyRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schema_2eproto::InitDefaultsKeyRange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.KeyRange)
}
KeyRange::KeyRange(const KeyRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  low_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_low()) {
    low_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.low_);
  }
  high_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_high()) {
    high_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.high_);
  }
  // @@protoc_insertion_point(copy_constructor:tipb.KeyRange)
}

void KeyRange::SharedCtor() {
  _cached_size_ = 0;
  low_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  high_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeyRange::~KeyRange() {
  // @@protoc_insertion_point(destructor:tipb.KeyRange)
  SharedDtor();
}

void KeyRange::SharedDtor() {
  low_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  high_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyRange::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyRange& KeyRange::default_instance() {
  ::protobuf_schema_2eproto::InitDefaultsKeyRange();
  return *internal_default_instance();
}

KeyRange* KeyRange::New(::google::protobuf::Arena* arena) const {
  KeyRange* n = new KeyRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.KeyRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!low_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*low_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!high_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*high_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeyRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.KeyRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes low = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_low()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes high = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_high()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.KeyRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.KeyRange)
  return false;
#undef DO_
}

void KeyRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.KeyRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes low = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->low(), output);
  }

  // optional bytes high = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->high(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.KeyRange)
}

::google::protobuf::uint8* KeyRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.KeyRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes low = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->low(), target);
  }

  // optional bytes high = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->high(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.KeyRange)
  return target;
}

size_t KeyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.KeyRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes low = 1;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->low());
    }

    // optional bytes high = 2;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->high());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.KeyRange)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.KeyRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.KeyRange)
    MergeFrom(*source);
  }
}

void KeyRange::MergeFrom(const KeyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.KeyRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_low();
      low_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.low_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_high();
      high_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.high_);
    }
  }
}

void KeyRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.KeyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyRange::CopyFrom(const KeyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.KeyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyRange::IsInitialized() const {
  return true;
}

void KeyRange::Swap(KeyRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyRange::InternalSwap(KeyRange* other) {
  using std::swap;
  low_.Swap(&other->low_);
  high_.Swap(&other->high_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyRange::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tipb

// @@protoc_insertion_point(global_scope)
