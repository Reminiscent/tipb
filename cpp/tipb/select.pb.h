// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: select.proto

#ifndef PROTOBUF_select_2eproto__INCLUDED
#define PROTOBUF_select_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "executor.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_select_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRowImpl();
void InitDefaultsRow();
void InitDefaultsErrorImpl();
void InitDefaultsError();
void InitDefaultsSelectResponseImpl();
void InitDefaultsSelectResponse();
void InitDefaultsChunkImpl();
void InitDefaultsChunk();
void InitDefaultsRowMetaImpl();
void InitDefaultsRowMeta();
void InitDefaultsDAGRequestImpl();
void InitDefaultsDAGRequest();
void InitDefaultsStreamResponseImpl();
void InitDefaultsStreamResponse();
inline void InitDefaults() {
  InitDefaultsRow();
  InitDefaultsError();
  InitDefaultsSelectResponse();
  InitDefaultsChunk();
  InitDefaultsRowMeta();
  InitDefaultsDAGRequest();
  InitDefaultsStreamResponse();
}
}  // namespace protobuf_select_2eproto
namespace tipb {
class Chunk;
class ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class DAGRequest;
class DAGRequestDefaultTypeInternal;
extern DAGRequestDefaultTypeInternal _DAGRequest_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class RowMeta;
class RowMetaDefaultTypeInternal;
extern RowMetaDefaultTypeInternal _RowMeta_default_instance_;
class SelectResponse;
class SelectResponseDefaultTypeInternal;
extern SelectResponseDefaultTypeInternal _SelectResponse_default_instance_;
class StreamResponse;
class StreamResponseDefaultTypeInternal;
extern StreamResponseDefaultTypeInternal _StreamResponse_default_instance_;
}  // namespace tipb
namespace tipb {

enum EncodeType {
  TypeDefault = 0,
  TypeArrow = 1
};
bool EncodeType_IsValid(int value);
const EncodeType EncodeType_MIN = TypeDefault;
const EncodeType EncodeType_MAX = TypeArrow;
const int EncodeType_ARRAYSIZE = EncodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EncodeType_descriptor();
inline const ::std::string& EncodeType_Name(EncodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EncodeType_descriptor(), value);
}
inline bool EncodeType_Parse(
    const ::std::string& name, EncodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EncodeType>(
    EncodeType_descriptor(), name, value);
}
// ===================================================================

class Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Row* other);
  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const PROTOBUF_FINAL { return New(NULL); }

  Row* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes handle = 1;
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:tipb.Row)
 private:
  void set_has_handle();
  void clear_has_handle();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::protobuf_select_2eproto::TableStruct;
  friend void ::protobuf_select_2eproto::InitDefaultsRowImpl();
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tipb.Error)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_select_2eproto::TableStruct;
  friend void ::protobuf_select_2eproto::InitDefaultsErrorImpl();
};
// -------------------------------------------------------------------

class SelectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.SelectResponse) */ {
 public:
  SelectResponse();
  virtual ~SelectResponse();

  SelectResponse(const SelectResponse& from);

  inline SelectResponse& operator=(const SelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectResponse(SelectResponse&& from) noexcept
    : SelectResponse() {
    *this = ::std::move(from);
  }

  inline SelectResponse& operator=(SelectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectResponse* internal_default_instance() {
    return reinterpret_cast<const SelectResponse*>(
               &_SelectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SelectResponse* other);
  friend void swap(SelectResponse& a, SelectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectResponse& from);
  void MergeFrom(const SelectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tipb.Row rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  const ::tipb::Row& rows(int index) const;
  ::tipb::Row* mutable_rows(int index);
  ::tipb::Row* add_rows();
  ::google::protobuf::RepeatedPtrField< ::tipb::Row >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::tipb::Row >&
      rows() const;

  // repeated .tipb.Chunk chunks = 3;
  int chunks_size() const;
  void clear_chunks();
  static const int kChunksFieldNumber = 3;
  const ::tipb::Chunk& chunks(int index) const;
  ::tipb::Chunk* mutable_chunks(int index);
  ::tipb::Chunk* add_chunks();
  ::google::protobuf::RepeatedPtrField< ::tipb::Chunk >*
      mutable_chunks();
  const ::google::protobuf::RepeatedPtrField< ::tipb::Chunk >&
      chunks() const;

  // repeated .tipb.Error warnings = 4;
  int warnings_size() const;
  void clear_warnings();
  static const int kWarningsFieldNumber = 4;
  const ::tipb::Error& warnings(int index) const;
  ::tipb::Error* mutable_warnings(int index);
  ::tipb::Error* add_warnings();
  ::google::protobuf::RepeatedPtrField< ::tipb::Error >*
      mutable_warnings();
  const ::google::protobuf::RepeatedPtrField< ::tipb::Error >&
      warnings() const;

  // repeated int64 output_counts = 5;
  int output_counts_size() const;
  void clear_output_counts();
  static const int kOutputCountsFieldNumber = 5;
  ::google::protobuf::int64 output_counts(int index) const;
  void set_output_counts(int index, ::google::protobuf::int64 value);
  void add_output_counts(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      output_counts() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_output_counts();

  // repeated .tipb.ExecutorExecutionSummary execution_summaries = 8;
  int execution_summaries_size() const;
  void clear_execution_summaries();
  static const int kExecutionSummariesFieldNumber = 8;
  const ::tipb::ExecutorExecutionSummary& execution_summaries(int index) const;
  ::tipb::ExecutorExecutionSummary* mutable_execution_summaries(int index);
  ::tipb::ExecutorExecutionSummary* add_execution_summaries();
  ::google::protobuf::RepeatedPtrField< ::tipb::ExecutorExecutionSummary >*
      mutable_execution_summaries();
  const ::google::protobuf::RepeatedPtrField< ::tipb::ExecutorExecutionSummary >&
      execution_summaries() const;

  // optional .tipb.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::tipb::Error& error() const;
  ::tipb::Error* release_error();
  ::tipb::Error* mutable_error();
  void set_allocated_error(::tipb::Error* error);

  // optional int64 warning_count = 6;
  bool has_warning_count() const;
  void clear_warning_count();
  static const int kWarningCountFieldNumber = 6;
  ::google::protobuf::int64 warning_count() const;
  void set_warning_count(::google::protobuf::int64 value);

  // optional .tipb.EncodeType encode_type = 7;
  bool has_encode_type() const;
  void clear_encode_type();
  static const int kEncodeTypeFieldNumber = 7;
  ::tipb::EncodeType encode_type() const;
  void set_encode_type(::tipb::EncodeType value);

  // @@protoc_insertion_point(class_scope:tipb.SelectResponse)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_warning_count();
  void clear_has_warning_count();
  void set_has_encode_type();
  void clear_has_encode_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tipb::Row > rows_;
  ::google::protobuf::RepeatedPtrField< ::tipb::Chunk > chunks_;
  ::google::protobuf::RepeatedPtrField< ::tipb::Error > warnings_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > output_counts_;
  ::google::protobuf::RepeatedPtrField< ::tipb::ExecutorExecutionSummary > execution_summaries_;
  ::tipb::Error* error_;
  ::google::protobuf::int64 warning_count_;
  int encode_type_;
  friend struct ::protobuf_select_2eproto::TableStruct;
  friend void ::protobuf_select_2eproto::InitDefaultsSelectResponseImpl();
};
// -------------------------------------------------------------------

class Chunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.Chunk) */ {
 public:
  Chunk();
  virtual ~Chunk();

  Chunk(const Chunk& from);

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Chunk* other);
  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const PROTOBUF_FINAL { return New(NULL); }

  Chunk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Chunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tipb.RowMeta rows_meta = 4;
  int rows_meta_size() const;
  void clear_rows_meta();
  static const int kRowsMetaFieldNumber = 4;
  const ::tipb::RowMeta& rows_meta(int index) const;
  ::tipb::RowMeta* mutable_rows_meta(int index);
  ::tipb::RowMeta* add_rows_meta();
  ::google::protobuf::RepeatedPtrField< ::tipb::RowMeta >*
      mutable_rows_meta();
  const ::google::protobuf::RepeatedPtrField< ::tipb::RowMeta >&
      rows_meta() const;

  // optional bytes rows_data = 3;
  bool has_rows_data() const;
  void clear_rows_data();
  static const int kRowsDataFieldNumber = 3;
  const ::std::string& rows_data() const;
  void set_rows_data(const ::std::string& value);
  #if LANG_CXX11
  void set_rows_data(::std::string&& value);
  #endif
  void set_rows_data(const char* value);
  void set_rows_data(const void* value, size_t size);
  ::std::string* mutable_rows_data();
  ::std::string* release_rows_data();
  void set_allocated_rows_data(::std::string* rows_data);

  // @@protoc_insertion_point(class_scope:tipb.Chunk)
 private:
  void set_has_rows_data();
  void clear_has_rows_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tipb::RowMeta > rows_meta_;
  ::google::protobuf::internal::ArenaStringPtr rows_data_;
  friend struct ::protobuf_select_2eproto::TableStruct;
  friend void ::protobuf_select_2eproto::InitDefaultsChunkImpl();
};
// -------------------------------------------------------------------

class RowMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.RowMeta) */ {
 public:
  RowMeta();
  virtual ~RowMeta();

  RowMeta(const RowMeta& from);

  inline RowMeta& operator=(const RowMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RowMeta(RowMeta&& from) noexcept
    : RowMeta() {
    *this = ::std::move(from);
  }

  inline RowMeta& operator=(RowMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RowMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RowMeta* internal_default_instance() {
    return reinterpret_cast<const RowMeta*>(
               &_RowMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RowMeta* other);
  friend void swap(RowMeta& a, RowMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RowMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  RowMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RowMeta& from);
  void MergeFrom(const RowMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RowMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 handle = 1;
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // optional int64 length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::int64 length() const;
  void set_length(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tipb.RowMeta)
 private:
  void set_has_handle();
  void clear_has_handle();
  void set_has_length();
  void clear_has_length();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 handle_;
  ::google::protobuf::int64 length_;
  friend struct ::protobuf_select_2eproto::TableStruct;
  friend void ::protobuf_select_2eproto::InitDefaultsRowMetaImpl();
};
// -------------------------------------------------------------------

class DAGRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.DAGRequest) */ {
 public:
  DAGRequest();
  virtual ~DAGRequest();

  DAGRequest(const DAGRequest& from);

  inline DAGRequest& operator=(const DAGRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DAGRequest(DAGRequest&& from) noexcept
    : DAGRequest() {
    *this = ::std::move(from);
  }

  inline DAGRequest& operator=(DAGRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DAGRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DAGRequest* internal_default_instance() {
    return reinterpret_cast<const DAGRequest*>(
               &_DAGRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DAGRequest* other);
  friend void swap(DAGRequest& a, DAGRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DAGRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DAGRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DAGRequest& from);
  void MergeFrom(const DAGRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DAGRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tipb.Executor executors = 2;
  int executors_size() const;
  void clear_executors();
  static const int kExecutorsFieldNumber = 2;
  const ::tipb::Executor& executors(int index) const;
  ::tipb::Executor* mutable_executors(int index);
  ::tipb::Executor* add_executors();
  ::google::protobuf::RepeatedPtrField< ::tipb::Executor >*
      mutable_executors();
  const ::google::protobuf::RepeatedPtrField< ::tipb::Executor >&
      executors() const;

  // repeated uint32 output_offsets = 5;
  int output_offsets_size() const;
  void clear_output_offsets();
  static const int kOutputOffsetsFieldNumber = 5;
  ::google::protobuf::uint32 output_offsets(int index) const;
  void set_output_offsets(int index, ::google::protobuf::uint32 value);
  void add_output_offsets(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      output_offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_output_offsets();

  // optional string time_zone_name = 11;
  bool has_time_zone_name() const;
  void clear_time_zone_name();
  static const int kTimeZoneNameFieldNumber = 11;
  const ::std::string& time_zone_name() const;
  void set_time_zone_name(const ::std::string& value);
  #if LANG_CXX11
  void set_time_zone_name(::std::string&& value);
  #endif
  void set_time_zone_name(const char* value);
  void set_time_zone_name(const char* value, size_t size);
  ::std::string* mutable_time_zone_name();
  ::std::string* release_time_zone_name();
  void set_allocated_time_zone_name(::std::string* time_zone_name);

  // optional uint64 start_ts = 1;
  bool has_start_ts() const;
  void clear_start_ts();
  static const int kStartTsFieldNumber = 1;
  ::google::protobuf::uint64 start_ts() const;
  void set_start_ts(::google::protobuf::uint64 value);

  // optional int64 time_zone_offset = 3;
  bool has_time_zone_offset() const;
  void clear_time_zone_offset();
  static const int kTimeZoneOffsetFieldNumber = 3;
  ::google::protobuf::int64 time_zone_offset() const;
  void set_time_zone_offset(::google::protobuf::int64 value);

  // optional uint64 flags = 4;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 4;
  ::google::protobuf::uint64 flags() const;
  void set_flags(::google::protobuf::uint64 value);

  // optional uint64 max_warning_count = 7;
  bool has_max_warning_count() const;
  void clear_max_warning_count();
  static const int kMaxWarningCountFieldNumber = 7;
  ::google::protobuf::uint64 max_warning_count() const;
  void set_max_warning_count(::google::protobuf::uint64 value);

  // optional .tipb.EncodeType encode_type = 8;
  bool has_encode_type() const;
  void clear_encode_type();
  static const int kEncodeTypeFieldNumber = 8;
  ::tipb::EncodeType encode_type() const;
  void set_encode_type(::tipb::EncodeType value);

  // optional bool collect_range_counts = 6;
  bool has_collect_range_counts() const;
  void clear_collect_range_counts();
  static const int kCollectRangeCountsFieldNumber = 6;
  bool collect_range_counts() const;
  void set_collect_range_counts(bool value);

  // optional bool collect_execution_summaries = 12;
  bool has_collect_execution_summaries() const;
  void clear_collect_execution_summaries();
  static const int kCollectExecutionSummariesFieldNumber = 12;
  bool collect_execution_summaries() const;
  void set_collect_execution_summaries(bool value);

  // optional uint64 sql_mode = 9;
  bool has_sql_mode() const;
  void clear_sql_mode();
  static const int kSqlModeFieldNumber = 9;
  ::google::protobuf::uint64 sql_mode() const;
  void set_sql_mode(::google::protobuf::uint64 value);

  // optional uint64 max_allowed_packet = 13;
  bool has_max_allowed_packet() const;
  void clear_max_allowed_packet();
  static const int kMaxAllowedPacketFieldNumber = 13;
  ::google::protobuf::uint64 max_allowed_packet() const;
  void set_max_allowed_packet(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tipb.DAGRequest)
 private:
  void set_has_start_ts();
  void clear_has_start_ts();
  void set_has_time_zone_offset();
  void clear_has_time_zone_offset();
  void set_has_flags();
  void clear_has_flags();
  void set_has_collect_range_counts();
  void clear_has_collect_range_counts();
  void set_has_max_warning_count();
  void clear_has_max_warning_count();
  void set_has_encode_type();
  void clear_has_encode_type();
  void set_has_sql_mode();
  void clear_has_sql_mode();
  void set_has_time_zone_name();
  void clear_has_time_zone_name();
  void set_has_collect_execution_summaries();
  void clear_has_collect_execution_summaries();
  void set_has_max_allowed_packet();
  void clear_has_max_allowed_packet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tipb::Executor > executors_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > output_offsets_;
  ::google::protobuf::internal::ArenaStringPtr time_zone_name_;
  ::google::protobuf::uint64 start_ts_;
  ::google::protobuf::int64 time_zone_offset_;
  ::google::protobuf::uint64 flags_;
  ::google::protobuf::uint64 max_warning_count_;
  int encode_type_;
  bool collect_range_counts_;
  bool collect_execution_summaries_;
  ::google::protobuf::uint64 sql_mode_;
  ::google::protobuf::uint64 max_allowed_packet_;
  friend struct ::protobuf_select_2eproto::TableStruct;
  friend void ::protobuf_select_2eproto::InitDefaultsDAGRequestImpl();
};
// -------------------------------------------------------------------

class StreamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tipb.StreamResponse) */ {
 public:
  StreamResponse();
  virtual ~StreamResponse();

  StreamResponse(const StreamResponse& from);

  inline StreamResponse& operator=(const StreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamResponse(StreamResponse&& from) noexcept
    : StreamResponse() {
    *this = ::std::move(from);
  }

  inline StreamResponse& operator=(StreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamResponse* internal_default_instance() {
    return reinterpret_cast<const StreamResponse*>(
               &_StreamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(StreamResponse* other);
  friend void swap(StreamResponse& a, StreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamResponse& from);
  void MergeFrom(const StreamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tipb.Error warnings = 4;
  int warnings_size() const;
  void clear_warnings();
  static const int kWarningsFieldNumber = 4;
  const ::tipb::Error& warnings(int index) const;
  ::tipb::Error* mutable_warnings(int index);
  ::tipb::Error* add_warnings();
  ::google::protobuf::RepeatedPtrField< ::tipb::Error >*
      mutable_warnings();
  const ::google::protobuf::RepeatedPtrField< ::tipb::Error >&
      warnings() const;

  // repeated int64 output_counts = 5;
  int output_counts_size() const;
  void clear_output_counts();
  static const int kOutputCountsFieldNumber = 5;
  ::google::protobuf::int64 output_counts(int index) const;
  void set_output_counts(int index, ::google::protobuf::int64 value);
  void add_output_counts(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      output_counts() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_output_counts();

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .tipb.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::tipb::Error& error() const;
  ::tipb::Error* release_error();
  ::tipb::Error* mutable_error();
  void set_allocated_error(::tipb::Error* error);

  // optional int64 warning_count = 6;
  bool has_warning_count() const;
  void clear_warning_count();
  static const int kWarningCountFieldNumber = 6;
  ::google::protobuf::int64 warning_count() const;
  void set_warning_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tipb.StreamResponse)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_data();
  void clear_has_data();
  void set_has_warning_count();
  void clear_has_warning_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tipb::Error > warnings_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > output_counts_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::tipb::Error* error_;
  ::google::protobuf::int64 warning_count_;
  friend struct ::protobuf_select_2eproto::TableStruct;
  friend void ::protobuf_select_2eproto::InitDefaultsStreamResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Row

// optional bytes handle = 1;
inline bool Row::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Row::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Row::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Row::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_handle();
}
inline const ::std::string& Row::handle() const {
  // @@protoc_insertion_point(field_get:tipb.Row.handle)
  return handle_.GetNoArena();
}
inline void Row::set_handle(const ::std::string& value) {
  set_has_handle();
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.Row.handle)
}
#if LANG_CXX11
inline void Row::set_handle(::std::string&& value) {
  set_has_handle();
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.Row.handle)
}
#endif
inline void Row::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_handle();
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.Row.handle)
}
inline void Row::set_handle(const void* value, size_t size) {
  set_has_handle();
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.Row.handle)
}
inline ::std::string* Row::mutable_handle() {
  set_has_handle();
  // @@protoc_insertion_point(field_mutable:tipb.Row.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Row::release_handle() {
  // @@protoc_insertion_point(field_release:tipb.Row.handle)
  clear_has_handle();
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Row::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    set_has_handle();
  } else {
    clear_has_handle();
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:tipb.Row.handle)
}

// optional bytes data = 2;
inline bool Row::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Row::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Row::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Row::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Row::data() const {
  // @@protoc_insertion_point(field_get:tipb.Row.data)
  return data_.GetNoArena();
}
inline void Row::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.Row.data)
}
#if LANG_CXX11
inline void Row::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.Row.data)
}
#endif
inline void Row::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.Row.data)
}
inline void Row::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.Row.data)
}
inline ::std::string* Row::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:tipb.Row.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Row::release_data() {
  // @@protoc_insertion_point(field_release:tipb.Row.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Row::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tipb.Row.data)
}

// -------------------------------------------------------------------

// Error

// optional int32 code = 1;
inline bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:tipb.Error.code)
  return code_;
}
inline void Error::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:tipb.Error.code)
}

// optional string msg = 2;
inline bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:tipb.Error.msg)
  return msg_.GetNoArena();
}
inline void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.Error.msg)
}
#if LANG_CXX11
inline void Error::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.Error.msg)
}
#endif
inline void Error::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.Error.msg)
}
inline void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.Error.msg)
}
inline ::std::string* Error::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:tipb.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:tipb.Error.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:tipb.Error.msg)
}

// -------------------------------------------------------------------

// SelectResponse

// optional .tipb.Error error = 1;
inline bool SelectResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectResponse::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
inline const ::tipb::Error& SelectResponse::error() const {
  const ::tipb::Error* p = error_;
  // @@protoc_insertion_point(field_get:tipb.SelectResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::tipb::Error*>(
      &::tipb::_Error_default_instance_);
}
inline ::tipb::Error* SelectResponse::release_error() {
  // @@protoc_insertion_point(field_release:tipb.SelectResponse.error)
  clear_has_error();
  ::tipb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::tipb::Error* SelectResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::tipb::Error;
  }
  // @@protoc_insertion_point(field_mutable:tipb.SelectResponse.error)
  return error_;
}
inline void SelectResponse::set_allocated_error(::tipb::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:tipb.SelectResponse.error)
}

// repeated .tipb.Row rows = 2;
inline int SelectResponse::rows_size() const {
  return rows_.size();
}
inline void SelectResponse::clear_rows() {
  rows_.Clear();
}
inline const ::tipb::Row& SelectResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:tipb.SelectResponse.rows)
  return rows_.Get(index);
}
inline ::tipb::Row* SelectResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.SelectResponse.rows)
  return rows_.Mutable(index);
}
inline ::tipb::Row* SelectResponse::add_rows() {
  // @@protoc_insertion_point(field_add:tipb.SelectResponse.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::Row >*
SelectResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:tipb.SelectResponse.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::Row >&
SelectResponse::rows() const {
  // @@protoc_insertion_point(field_list:tipb.SelectResponse.rows)
  return rows_;
}

// repeated .tipb.Chunk chunks = 3;
inline int SelectResponse::chunks_size() const {
  return chunks_.size();
}
inline void SelectResponse::clear_chunks() {
  chunks_.Clear();
}
inline const ::tipb::Chunk& SelectResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:tipb.SelectResponse.chunks)
  return chunks_.Get(index);
}
inline ::tipb::Chunk* SelectResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.SelectResponse.chunks)
  return chunks_.Mutable(index);
}
inline ::tipb::Chunk* SelectResponse::add_chunks() {
  // @@protoc_insertion_point(field_add:tipb.SelectResponse.chunks)
  return chunks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::Chunk >*
SelectResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:tipb.SelectResponse.chunks)
  return &chunks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::Chunk >&
SelectResponse::chunks() const {
  // @@protoc_insertion_point(field_list:tipb.SelectResponse.chunks)
  return chunks_;
}

// repeated .tipb.Error warnings = 4;
inline int SelectResponse::warnings_size() const {
  return warnings_.size();
}
inline void SelectResponse::clear_warnings() {
  warnings_.Clear();
}
inline const ::tipb::Error& SelectResponse::warnings(int index) const {
  // @@protoc_insertion_point(field_get:tipb.SelectResponse.warnings)
  return warnings_.Get(index);
}
inline ::tipb::Error* SelectResponse::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.SelectResponse.warnings)
  return warnings_.Mutable(index);
}
inline ::tipb::Error* SelectResponse::add_warnings() {
  // @@protoc_insertion_point(field_add:tipb.SelectResponse.warnings)
  return warnings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::Error >*
SelectResponse::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:tipb.SelectResponse.warnings)
  return &warnings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::Error >&
SelectResponse::warnings() const {
  // @@protoc_insertion_point(field_list:tipb.SelectResponse.warnings)
  return warnings_;
}

// repeated int64 output_counts = 5;
inline int SelectResponse::output_counts_size() const {
  return output_counts_.size();
}
inline void SelectResponse::clear_output_counts() {
  output_counts_.Clear();
}
inline ::google::protobuf::int64 SelectResponse::output_counts(int index) const {
  // @@protoc_insertion_point(field_get:tipb.SelectResponse.output_counts)
  return output_counts_.Get(index);
}
inline void SelectResponse::set_output_counts(int index, ::google::protobuf::int64 value) {
  output_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:tipb.SelectResponse.output_counts)
}
inline void SelectResponse::add_output_counts(::google::protobuf::int64 value) {
  output_counts_.Add(value);
  // @@protoc_insertion_point(field_add:tipb.SelectResponse.output_counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SelectResponse::output_counts() const {
  // @@protoc_insertion_point(field_list:tipb.SelectResponse.output_counts)
  return output_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SelectResponse::mutable_output_counts() {
  // @@protoc_insertion_point(field_mutable_list:tipb.SelectResponse.output_counts)
  return &output_counts_;
}

// optional int64 warning_count = 6;
inline bool SelectResponse::has_warning_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectResponse::set_has_warning_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectResponse::clear_has_warning_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectResponse::clear_warning_count() {
  warning_count_ = GOOGLE_LONGLONG(0);
  clear_has_warning_count();
}
inline ::google::protobuf::int64 SelectResponse::warning_count() const {
  // @@protoc_insertion_point(field_get:tipb.SelectResponse.warning_count)
  return warning_count_;
}
inline void SelectResponse::set_warning_count(::google::protobuf::int64 value) {
  set_has_warning_count();
  warning_count_ = value;
  // @@protoc_insertion_point(field_set:tipb.SelectResponse.warning_count)
}

// optional .tipb.EncodeType encode_type = 7;
inline bool SelectResponse::has_encode_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectResponse::set_has_encode_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectResponse::clear_has_encode_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectResponse::clear_encode_type() {
  encode_type_ = 0;
  clear_has_encode_type();
}
inline ::tipb::EncodeType SelectResponse::encode_type() const {
  // @@protoc_insertion_point(field_get:tipb.SelectResponse.encode_type)
  return static_cast< ::tipb::EncodeType >(encode_type_);
}
inline void SelectResponse::set_encode_type(::tipb::EncodeType value) {
  assert(::tipb::EncodeType_IsValid(value));
  set_has_encode_type();
  encode_type_ = value;
  // @@protoc_insertion_point(field_set:tipb.SelectResponse.encode_type)
}

// repeated .tipb.ExecutorExecutionSummary execution_summaries = 8;
inline int SelectResponse::execution_summaries_size() const {
  return execution_summaries_.size();
}
inline const ::tipb::ExecutorExecutionSummary& SelectResponse::execution_summaries(int index) const {
  // @@protoc_insertion_point(field_get:tipb.SelectResponse.execution_summaries)
  return execution_summaries_.Get(index);
}
inline ::tipb::ExecutorExecutionSummary* SelectResponse::mutable_execution_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.SelectResponse.execution_summaries)
  return execution_summaries_.Mutable(index);
}
inline ::tipb::ExecutorExecutionSummary* SelectResponse::add_execution_summaries() {
  // @@protoc_insertion_point(field_add:tipb.SelectResponse.execution_summaries)
  return execution_summaries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::ExecutorExecutionSummary >*
SelectResponse::mutable_execution_summaries() {
  // @@protoc_insertion_point(field_mutable_list:tipb.SelectResponse.execution_summaries)
  return &execution_summaries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::ExecutorExecutionSummary >&
SelectResponse::execution_summaries() const {
  // @@protoc_insertion_point(field_list:tipb.SelectResponse.execution_summaries)
  return execution_summaries_;
}

// -------------------------------------------------------------------

// Chunk

// optional bytes rows_data = 3;
inline bool Chunk::has_rows_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chunk::set_has_rows_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chunk::clear_has_rows_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chunk::clear_rows_data() {
  rows_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rows_data();
}
inline const ::std::string& Chunk::rows_data() const {
  // @@protoc_insertion_point(field_get:tipb.Chunk.rows_data)
  return rows_data_.GetNoArena();
}
inline void Chunk::set_rows_data(const ::std::string& value) {
  set_has_rows_data();
  rows_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.Chunk.rows_data)
}
#if LANG_CXX11
inline void Chunk::set_rows_data(::std::string&& value) {
  set_has_rows_data();
  rows_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.Chunk.rows_data)
}
#endif
inline void Chunk::set_rows_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rows_data();
  rows_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.Chunk.rows_data)
}
inline void Chunk::set_rows_data(const void* value, size_t size) {
  set_has_rows_data();
  rows_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.Chunk.rows_data)
}
inline ::std::string* Chunk::mutable_rows_data() {
  set_has_rows_data();
  // @@protoc_insertion_point(field_mutable:tipb.Chunk.rows_data)
  return rows_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chunk::release_rows_data() {
  // @@protoc_insertion_point(field_release:tipb.Chunk.rows_data)
  clear_has_rows_data();
  return rows_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chunk::set_allocated_rows_data(::std::string* rows_data) {
  if (rows_data != NULL) {
    set_has_rows_data();
  } else {
    clear_has_rows_data();
  }
  rows_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rows_data);
  // @@protoc_insertion_point(field_set_allocated:tipb.Chunk.rows_data)
}

// repeated .tipb.RowMeta rows_meta = 4;
inline int Chunk::rows_meta_size() const {
  return rows_meta_.size();
}
inline void Chunk::clear_rows_meta() {
  rows_meta_.Clear();
}
inline const ::tipb::RowMeta& Chunk::rows_meta(int index) const {
  // @@protoc_insertion_point(field_get:tipb.Chunk.rows_meta)
  return rows_meta_.Get(index);
}
inline ::tipb::RowMeta* Chunk::mutable_rows_meta(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.Chunk.rows_meta)
  return rows_meta_.Mutable(index);
}
inline ::tipb::RowMeta* Chunk::add_rows_meta() {
  // @@protoc_insertion_point(field_add:tipb.Chunk.rows_meta)
  return rows_meta_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::RowMeta >*
Chunk::mutable_rows_meta() {
  // @@protoc_insertion_point(field_mutable_list:tipb.Chunk.rows_meta)
  return &rows_meta_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::RowMeta >&
Chunk::rows_meta() const {
  // @@protoc_insertion_point(field_list:tipb.Chunk.rows_meta)
  return rows_meta_;
}

// -------------------------------------------------------------------

// RowMeta

// optional int64 handle = 1;
inline bool RowMeta::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RowMeta::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RowMeta::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RowMeta::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::int64 RowMeta::handle() const {
  // @@protoc_insertion_point(field_get:tipb.RowMeta.handle)
  return handle_;
}
inline void RowMeta::set_handle(::google::protobuf::int64 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:tipb.RowMeta.handle)
}

// optional int64 length = 2;
inline bool RowMeta::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RowMeta::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RowMeta::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RowMeta::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::int64 RowMeta::length() const {
  // @@protoc_insertion_point(field_get:tipb.RowMeta.length)
  return length_;
}
inline void RowMeta::set_length(::google::protobuf::int64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:tipb.RowMeta.length)
}

// -------------------------------------------------------------------

// DAGRequest

// optional uint64 start_ts = 1;
inline bool DAGRequest::has_start_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DAGRequest::set_has_start_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DAGRequest::clear_has_start_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DAGRequest::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_start_ts();
}
inline ::google::protobuf::uint64 DAGRequest::start_ts() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.start_ts)
  return start_ts_;
}
inline void DAGRequest::set_start_ts(::google::protobuf::uint64 value) {
  set_has_start_ts();
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.start_ts)
}

// repeated .tipb.Executor executors = 2;
inline int DAGRequest::executors_size() const {
  return executors_.size();
}
inline const ::tipb::Executor& DAGRequest::executors(int index) const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.executors)
  return executors_.Get(index);
}
inline ::tipb::Executor* DAGRequest::mutable_executors(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.DAGRequest.executors)
  return executors_.Mutable(index);
}
inline ::tipb::Executor* DAGRequest::add_executors() {
  // @@protoc_insertion_point(field_add:tipb.DAGRequest.executors)
  return executors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::Executor >*
DAGRequest::mutable_executors() {
  // @@protoc_insertion_point(field_mutable_list:tipb.DAGRequest.executors)
  return &executors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::Executor >&
DAGRequest::executors() const {
  // @@protoc_insertion_point(field_list:tipb.DAGRequest.executors)
  return executors_;
}

// optional int64 time_zone_offset = 3;
inline bool DAGRequest::has_time_zone_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DAGRequest::set_has_time_zone_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DAGRequest::clear_has_time_zone_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DAGRequest::clear_time_zone_offset() {
  time_zone_offset_ = GOOGLE_LONGLONG(0);
  clear_has_time_zone_offset();
}
inline ::google::protobuf::int64 DAGRequest::time_zone_offset() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.time_zone_offset)
  return time_zone_offset_;
}
inline void DAGRequest::set_time_zone_offset(::google::protobuf::int64 value) {
  set_has_time_zone_offset();
  time_zone_offset_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.time_zone_offset)
}

// optional uint64 flags = 4;
inline bool DAGRequest::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DAGRequest::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DAGRequest::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DAGRequest::clear_flags() {
  flags_ = GOOGLE_ULONGLONG(0);
  clear_has_flags();
}
inline ::google::protobuf::uint64 DAGRequest::flags() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.flags)
  return flags_;
}
inline void DAGRequest::set_flags(::google::protobuf::uint64 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.flags)
}

// repeated uint32 output_offsets = 5;
inline int DAGRequest::output_offsets_size() const {
  return output_offsets_.size();
}
inline void DAGRequest::clear_output_offsets() {
  output_offsets_.Clear();
}
inline ::google::protobuf::uint32 DAGRequest::output_offsets(int index) const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.output_offsets)
  return output_offsets_.Get(index);
}
inline void DAGRequest::set_output_offsets(int index, ::google::protobuf::uint32 value) {
  output_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.output_offsets)
}
inline void DAGRequest::add_output_offsets(::google::protobuf::uint32 value) {
  output_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:tipb.DAGRequest.output_offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DAGRequest::output_offsets() const {
  // @@protoc_insertion_point(field_list:tipb.DAGRequest.output_offsets)
  return output_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DAGRequest::mutable_output_offsets() {
  // @@protoc_insertion_point(field_mutable_list:tipb.DAGRequest.output_offsets)
  return &output_offsets_;
}

// optional bool collect_range_counts = 6;
inline bool DAGRequest::has_collect_range_counts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DAGRequest::set_has_collect_range_counts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DAGRequest::clear_has_collect_range_counts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DAGRequest::clear_collect_range_counts() {
  collect_range_counts_ = false;
  clear_has_collect_range_counts();
}
inline bool DAGRequest::collect_range_counts() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.collect_range_counts)
  return collect_range_counts_;
}
inline void DAGRequest::set_collect_range_counts(bool value) {
  set_has_collect_range_counts();
  collect_range_counts_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.collect_range_counts)
}

// optional uint64 max_warning_count = 7;
inline bool DAGRequest::has_max_warning_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DAGRequest::set_has_max_warning_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DAGRequest::clear_has_max_warning_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DAGRequest::clear_max_warning_count() {
  max_warning_count_ = GOOGLE_ULONGLONG(0);
  clear_has_max_warning_count();
}
inline ::google::protobuf::uint64 DAGRequest::max_warning_count() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.max_warning_count)
  return max_warning_count_;
}
inline void DAGRequest::set_max_warning_count(::google::protobuf::uint64 value) {
  set_has_max_warning_count();
  max_warning_count_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.max_warning_count)
}

// optional .tipb.EncodeType encode_type = 8;
inline bool DAGRequest::has_encode_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DAGRequest::set_has_encode_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DAGRequest::clear_has_encode_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DAGRequest::clear_encode_type() {
  encode_type_ = 0;
  clear_has_encode_type();
}
inline ::tipb::EncodeType DAGRequest::encode_type() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.encode_type)
  return static_cast< ::tipb::EncodeType >(encode_type_);
}
inline void DAGRequest::set_encode_type(::tipb::EncodeType value) {
  assert(::tipb::EncodeType_IsValid(value));
  set_has_encode_type();
  encode_type_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.encode_type)
}

// optional uint64 sql_mode = 9;
inline bool DAGRequest::has_sql_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DAGRequest::set_has_sql_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DAGRequest::clear_has_sql_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DAGRequest::clear_sql_mode() {
  sql_mode_ = GOOGLE_ULONGLONG(0);
  clear_has_sql_mode();
}
inline ::google::protobuf::uint64 DAGRequest::sql_mode() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.sql_mode)
  return sql_mode_;
}
inline void DAGRequest::set_sql_mode(::google::protobuf::uint64 value) {
  set_has_sql_mode();
  sql_mode_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.sql_mode)
}

// optional string time_zone_name = 11;
inline bool DAGRequest::has_time_zone_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DAGRequest::set_has_time_zone_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DAGRequest::clear_has_time_zone_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DAGRequest::clear_time_zone_name() {
  time_zone_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time_zone_name();
}
inline const ::std::string& DAGRequest::time_zone_name() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.time_zone_name)
  return time_zone_name_.GetNoArena();
}
inline void DAGRequest::set_time_zone_name(const ::std::string& value) {
  set_has_time_zone_name();
  time_zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.time_zone_name)
}
#if LANG_CXX11
inline void DAGRequest::set_time_zone_name(::std::string&& value) {
  set_has_time_zone_name();
  time_zone_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.DAGRequest.time_zone_name)
}
#endif
inline void DAGRequest::set_time_zone_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time_zone_name();
  time_zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.DAGRequest.time_zone_name)
}
inline void DAGRequest::set_time_zone_name(const char* value, size_t size) {
  set_has_time_zone_name();
  time_zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.DAGRequest.time_zone_name)
}
inline ::std::string* DAGRequest::mutable_time_zone_name() {
  set_has_time_zone_name();
  // @@protoc_insertion_point(field_mutable:tipb.DAGRequest.time_zone_name)
  return time_zone_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DAGRequest::release_time_zone_name() {
  // @@protoc_insertion_point(field_release:tipb.DAGRequest.time_zone_name)
  clear_has_time_zone_name();
  return time_zone_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DAGRequest::set_allocated_time_zone_name(::std::string* time_zone_name) {
  if (time_zone_name != NULL) {
    set_has_time_zone_name();
  } else {
    clear_has_time_zone_name();
  }
  time_zone_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone_name);
  // @@protoc_insertion_point(field_set_allocated:tipb.DAGRequest.time_zone_name)
}

// optional bool collect_execution_summaries = 12;
inline bool DAGRequest::has_collect_execution_summaries() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DAGRequest::set_has_collect_execution_summaries() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DAGRequest::clear_has_collect_execution_summaries() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DAGRequest::clear_collect_execution_summaries() {
  collect_execution_summaries_ = false;
  clear_has_collect_execution_summaries();
}
inline bool DAGRequest::collect_execution_summaries() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.collect_execution_summaries)
  return collect_execution_summaries_;
}
inline void DAGRequest::set_collect_execution_summaries(bool value) {
  set_has_collect_execution_summaries();
  collect_execution_summaries_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.collect_execution_summaries)
}

// optional uint64 max_allowed_packet = 13;
inline bool DAGRequest::has_max_allowed_packet() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DAGRequest::set_has_max_allowed_packet() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DAGRequest::clear_has_max_allowed_packet() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DAGRequest::clear_max_allowed_packet() {
  max_allowed_packet_ = GOOGLE_ULONGLONG(0);
  clear_has_max_allowed_packet();
}
inline ::google::protobuf::uint64 DAGRequest::max_allowed_packet() const {
  // @@protoc_insertion_point(field_get:tipb.DAGRequest.max_allowed_packet)
  return max_allowed_packet_;
}
inline void DAGRequest::set_max_allowed_packet(::google::protobuf::uint64 value) {
  set_has_max_allowed_packet();
  max_allowed_packet_ = value;
  // @@protoc_insertion_point(field_set:tipb.DAGRequest.max_allowed_packet)
}

// -------------------------------------------------------------------

// StreamResponse

// optional .tipb.Error error = 1;
inline bool StreamResponse::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamResponse::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamResponse::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
inline const ::tipb::Error& StreamResponse::error() const {
  const ::tipb::Error* p = error_;
  // @@protoc_insertion_point(field_get:tipb.StreamResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::tipb::Error*>(
      &::tipb::_Error_default_instance_);
}
inline ::tipb::Error* StreamResponse::release_error() {
  // @@protoc_insertion_point(field_release:tipb.StreamResponse.error)
  clear_has_error();
  ::tipb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::tipb::Error* StreamResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::tipb::Error;
  }
  // @@protoc_insertion_point(field_mutable:tipb.StreamResponse.error)
  return error_;
}
inline void StreamResponse::set_allocated_error(::tipb::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:tipb.StreamResponse.error)
}

// optional bytes data = 3;
inline bool StreamResponse::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamResponse::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& StreamResponse::data() const {
  // @@protoc_insertion_point(field_get:tipb.StreamResponse.data)
  return data_.GetNoArena();
}
inline void StreamResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tipb.StreamResponse.data)
}
#if LANG_CXX11
inline void StreamResponse::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tipb.StreamResponse.data)
}
#endif
inline void StreamResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tipb.StreamResponse.data)
}
inline void StreamResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tipb.StreamResponse.data)
}
inline ::std::string* StreamResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:tipb.StreamResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamResponse::release_data() {
  // @@protoc_insertion_point(field_release:tipb.StreamResponse.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tipb.StreamResponse.data)
}

// repeated .tipb.Error warnings = 4;
inline int StreamResponse::warnings_size() const {
  return warnings_.size();
}
inline void StreamResponse::clear_warnings() {
  warnings_.Clear();
}
inline const ::tipb::Error& StreamResponse::warnings(int index) const {
  // @@protoc_insertion_point(field_get:tipb.StreamResponse.warnings)
  return warnings_.Get(index);
}
inline ::tipb::Error* StreamResponse::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:tipb.StreamResponse.warnings)
  return warnings_.Mutable(index);
}
inline ::tipb::Error* StreamResponse::add_warnings() {
  // @@protoc_insertion_point(field_add:tipb.StreamResponse.warnings)
  return warnings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tipb::Error >*
StreamResponse::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:tipb.StreamResponse.warnings)
  return &warnings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tipb::Error >&
StreamResponse::warnings() const {
  // @@protoc_insertion_point(field_list:tipb.StreamResponse.warnings)
  return warnings_;
}

// repeated int64 output_counts = 5;
inline int StreamResponse::output_counts_size() const {
  return output_counts_.size();
}
inline void StreamResponse::clear_output_counts() {
  output_counts_.Clear();
}
inline ::google::protobuf::int64 StreamResponse::output_counts(int index) const {
  // @@protoc_insertion_point(field_get:tipb.StreamResponse.output_counts)
  return output_counts_.Get(index);
}
inline void StreamResponse::set_output_counts(int index, ::google::protobuf::int64 value) {
  output_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:tipb.StreamResponse.output_counts)
}
inline void StreamResponse::add_output_counts(::google::protobuf::int64 value) {
  output_counts_.Add(value);
  // @@protoc_insertion_point(field_add:tipb.StreamResponse.output_counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
StreamResponse::output_counts() const {
  // @@protoc_insertion_point(field_list:tipb.StreamResponse.output_counts)
  return output_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
StreamResponse::mutable_output_counts() {
  // @@protoc_insertion_point(field_mutable_list:tipb.StreamResponse.output_counts)
  return &output_counts_;
}

// optional int64 warning_count = 6;
inline bool StreamResponse::has_warning_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamResponse::set_has_warning_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamResponse::clear_has_warning_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamResponse::clear_warning_count() {
  warning_count_ = GOOGLE_LONGLONG(0);
  clear_has_warning_count();
}
inline ::google::protobuf::int64 StreamResponse::warning_count() const {
  // @@protoc_insertion_point(field_get:tipb.StreamResponse.warning_count)
  return warning_count_;
}
inline void StreamResponse::set_warning_count(::google::protobuf::int64 value) {
  set_has_warning_count();
  warning_count_ = value;
  // @@protoc_insertion_point(field_set:tipb.StreamResponse.warning_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tipb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tipb::EncodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tipb::EncodeType>() {
  return ::tipb::EncodeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_select_2eproto__INCLUDED
