// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: executor.proto

#include "executor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tipb {
class ExecutorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Executor>
      _instance;
} _Executor_default_instance_;
class TableScanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableScan>
      _instance;
} _TableScan_default_instance_;
class IndexScanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexScan>
      _instance;
} _IndexScan_default_instance_;
class SelectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Selection>
      _instance;
} _Selection_default_instance_;
class ProjectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Projection>
      _instance;
} _Projection_default_instance_;
class AggregationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Aggregation>
      _instance;
} _Aggregation_default_instance_;
class TopNDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopN>
      _instance;
} _TopN_default_instance_;
class LimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Limit>
      _instance;
} _Limit_default_instance_;
class ExecutorExecutionSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutorExecutionSummary>
      _instance;
} _ExecutorExecutionSummary_default_instance_;
}  // namespace tipb
namespace protobuf_executor_2eproto {
void InitDefaultsExecutorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_executor_2eproto::InitDefaultsTableScan();
  protobuf_executor_2eproto::InitDefaultsIndexScan();
  protobuf_executor_2eproto::InitDefaultsSelection();
  protobuf_executor_2eproto::InitDefaultsAggregation();
  protobuf_executor_2eproto::InitDefaultsTopN();
  protobuf_executor_2eproto::InitDefaultsLimit();
  {
    void* ptr = &::tipb::_Executor_default_instance_;
    new (ptr) ::tipb::Executor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::Executor::InitAsDefaultInstance();
}

void InitDefaultsExecutor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExecutorImpl);
}

void InitDefaultsTableScanImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schema_2eproto::InitDefaultsColumnInfo();
  {
    void* ptr = &::tipb::_TableScan_default_instance_;
    new (ptr) ::tipb::TableScan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::TableScan::InitAsDefaultInstance();
}

void InitDefaultsTableScan() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableScanImpl);
}

void InitDefaultsIndexScanImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schema_2eproto::InitDefaultsColumnInfo();
  {
    void* ptr = &::tipb::_IndexScan_default_instance_;
    new (ptr) ::tipb::IndexScan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::IndexScan::InitAsDefaultInstance();
}

void InitDefaultsIndexScan() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIndexScanImpl);
}

void InitDefaultsSelectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_expression_2eproto::InitDefaultsExpr();
  {
    void* ptr = &::tipb::_Selection_default_instance_;
    new (ptr) ::tipb::Selection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::Selection::InitAsDefaultInstance();
}

void InitDefaultsSelection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSelectionImpl);
}

void InitDefaultsProjectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_expression_2eproto::InitDefaultsExpr();
  {
    void* ptr = &::tipb::_Projection_default_instance_;
    new (ptr) ::tipb::Projection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::Projection::InitAsDefaultInstance();
}

void InitDefaultsProjection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProjectionImpl);
}

void InitDefaultsAggregationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_expression_2eproto::InitDefaultsExpr();
  {
    void* ptr = &::tipb::_Aggregation_default_instance_;
    new (ptr) ::tipb::Aggregation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::Aggregation::InitAsDefaultInstance();
}

void InitDefaultsAggregation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAggregationImpl);
}

void InitDefaultsTopNImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_expression_2eproto::InitDefaultsByItem();
  {
    void* ptr = &::tipb::_TopN_default_instance_;
    new (ptr) ::tipb::TopN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::TopN::InitAsDefaultInstance();
}

void InitDefaultsTopN() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopNImpl);
}

void InitDefaultsLimitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_Limit_default_instance_;
    new (ptr) ::tipb::Limit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::Limit::InitAsDefaultInstance();
}

void InitDefaultsLimit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLimitImpl);
}

void InitDefaultsExecutorExecutionSummaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_ExecutorExecutionSummary_default_instance_;
    new (ptr) ::tipb::ExecutorExecutionSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::ExecutorExecutionSummary::InitAsDefaultInstance();
}

void InitDefaultsExecutorExecutionSummary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExecutorExecutionSummaryImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, tp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, tbl_scan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, idx_scan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, selection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, aggregation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, topn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Executor, stream_agg_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableScan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableScan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableScan, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableScan, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TableScan, desc_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexScan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexScan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexScan, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexScan, index_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexScan, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexScan, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::IndexScan, unique_),
  0,
  1,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Selection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Selection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Selection, conditions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Projection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Projection, exprs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Aggregation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Aggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Aggregation, group_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Aggregation, agg_func_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Aggregation, streamed_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TopN, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TopN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TopN, order_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::TopN, limit_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Limit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Limit, limit_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ExecutorExecutionSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ExecutorExecutionSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ExecutorExecutionSummary, time_processed_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ExecutorExecutionSummary, num_produced_rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::ExecutorExecutionSummary, num_iterations_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::tipb::Executor)},
  { 21, 29, sizeof(::tipb::TableScan)},
  { 32, 42, sizeof(::tipb::IndexScan)},
  { 47, 53, sizeof(::tipb::Selection)},
  { 54, 60, sizeof(::tipb::Projection)},
  { 61, 69, sizeof(::tipb::Aggregation)},
  { 72, 79, sizeof(::tipb::TopN)},
  { 81, 87, sizeof(::tipb::Limit)},
  { 88, 96, sizeof(::tipb::ExecutorExecutionSummary)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_Executor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_TableScan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_IndexScan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_Selection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_Projection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_Aggregation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_TopN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_Limit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_ExecutorExecutionSummary_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "executor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016executor.proto\022\004tipb\032\020expression.proto"
      "\032\014schema.proto\"\225\002\n\010Executor\022\032\n\002tp\030\001 \001(\0162"
      "\016.tipb.ExecType\022!\n\010tbl_scan\030\002 \001(\0132\017.tipb"
      ".TableScan\022!\n\010idx_scan\030\003 \001(\0132\017.tipb.Inde"
      "xScan\022\"\n\tselection\030\004 \001(\0132\017.tipb.Selectio"
      "n\022&\n\013aggregation\030\005 \001(\0132\021.tipb.Aggregatio"
      "n\022\030\n\004topN\030\006 \001(\0132\n.tipb.TopN\022\032\n\005limit\030\007 \001"
      "(\0132\013.tipb.Limit\022%\n\nstream_agg\030\010 \001(\0132\021.ti"
      "pb.Aggregation\"N\n\tTableScan\022\020\n\010table_id\030"
      "\001 \001(\003\022!\n\007columns\030\002 \003(\0132\020.tipb.ColumnInfo"
      "\022\014\n\004desc\030\003 \001(\010\"p\n\tIndexScan\022\020\n\010table_id\030"
      "\001 \001(\003\022\020\n\010index_id\030\002 \001(\003\022!\n\007columns\030\003 \003(\013"
      "2\020.tipb.ColumnInfo\022\014\n\004desc\030\004 \001(\010\022\016\n\006uniq"
      "ue\030\005 \001(\010\"+\n\tSelection\022\036\n\nconditions\030\001 \003("
      "\0132\n.tipb.Expr\"\'\n\nProjection\022\031\n\005exprs\030\001 \003"
      "(\0132\n.tipb.Expr\"[\n\013Aggregation\022\034\n\010group_b"
      "y\030\001 \003(\0132\n.tipb.Expr\022\034\n\010agg_func\030\002 \003(\0132\n."
      "tipb.Expr\022\020\n\010streamed\030\003 \001(\010\"5\n\004TopN\022\036\n\010o"
      "rder_by\030\001 \003(\0132\014.tipb.ByItem\022\r\n\005limit\030\002 \001"
      "(\004\"\026\n\005Limit\022\r\n\005limit\030\001 \001(\004\"h\n\030ExecutorEx"
      "ecutionSummary\022\031\n\021time_processed_ns\030\001 \001("
      "\004\022\031\n\021num_produced_rows\030\002 \001(\004\022\026\n\016num_iter"
      "ations\030\003 \001(\004*\210\001\n\010ExecType\022\021\n\rTypeTableSc"
      "an\020\000\022\021\n\rTypeIndexScan\020\001\022\021\n\rTypeSelection"
      "\020\002\022\023\n\017TypeAggregation\020\003\022\014\n\010TypeTopN\020\004\022\r\n"
      "\tTypeLimit\020\005\022\021\n\rTypeStreamAgg\020\006B\031\n\025com.p"
      "ingcap.tidb.tipbP\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1058);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "executor.proto", &protobuf_RegisterTypes);
  ::protobuf_expression_2eproto::AddDescriptors();
  ::protobuf_schema_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_executor_2eproto
namespace tipb {
const ::google::protobuf::EnumDescriptor* ExecType_descriptor() {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_executor_2eproto::file_level_enum_descriptors[0];
}
bool ExecType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Executor::InitAsDefaultInstance() {
  ::tipb::_Executor_default_instance_._instance.get_mutable()->tbl_scan_ = const_cast< ::tipb::TableScan*>(
      ::tipb::TableScan::internal_default_instance());
  ::tipb::_Executor_default_instance_._instance.get_mutable()->idx_scan_ = const_cast< ::tipb::IndexScan*>(
      ::tipb::IndexScan::internal_default_instance());
  ::tipb::_Executor_default_instance_._instance.get_mutable()->selection_ = const_cast< ::tipb::Selection*>(
      ::tipb::Selection::internal_default_instance());
  ::tipb::_Executor_default_instance_._instance.get_mutable()->aggregation_ = const_cast< ::tipb::Aggregation*>(
      ::tipb::Aggregation::internal_default_instance());
  ::tipb::_Executor_default_instance_._instance.get_mutable()->topn_ = const_cast< ::tipb::TopN*>(
      ::tipb::TopN::internal_default_instance());
  ::tipb::_Executor_default_instance_._instance.get_mutable()->limit_ = const_cast< ::tipb::Limit*>(
      ::tipb::Limit::internal_default_instance());
  ::tipb::_Executor_default_instance_._instance.get_mutable()->stream_agg_ = const_cast< ::tipb::Aggregation*>(
      ::tipb::Aggregation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Executor::kTpFieldNumber;
const int Executor::kTblScanFieldNumber;
const int Executor::kIdxScanFieldNumber;
const int Executor::kSelectionFieldNumber;
const int Executor::kAggregationFieldNumber;
const int Executor::kTopNFieldNumber;
const int Executor::kLimitFieldNumber;
const int Executor::kStreamAggFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Executor::Executor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsExecutor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.Executor)
}
Executor::Executor(const Executor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tbl_scan()) {
    tbl_scan_ = new ::tipb::TableScan(*from.tbl_scan_);
  } else {
    tbl_scan_ = NULL;
  }
  if (from.has_idx_scan()) {
    idx_scan_ = new ::tipb::IndexScan(*from.idx_scan_);
  } else {
    idx_scan_ = NULL;
  }
  if (from.has_selection()) {
    selection_ = new ::tipb::Selection(*from.selection_);
  } else {
    selection_ = NULL;
  }
  if (from.has_aggregation()) {
    aggregation_ = new ::tipb::Aggregation(*from.aggregation_);
  } else {
    aggregation_ = NULL;
  }
  if (from.has_topn()) {
    topn_ = new ::tipb::TopN(*from.topn_);
  } else {
    topn_ = NULL;
  }
  if (from.has_limit()) {
    limit_ = new ::tipb::Limit(*from.limit_);
  } else {
    limit_ = NULL;
  }
  if (from.has_stream_agg()) {
    stream_agg_ = new ::tipb::Aggregation(*from.stream_agg_);
  } else {
    stream_agg_ = NULL;
  }
  tp_ = from.tp_;
  // @@protoc_insertion_point(copy_constructor:tipb.Executor)
}

void Executor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tbl_scan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&tbl_scan_)) + sizeof(tp_));
}

Executor::~Executor() {
  // @@protoc_insertion_point(destructor:tipb.Executor)
  SharedDtor();
}

void Executor::SharedDtor() {
  if (this != internal_default_instance()) delete tbl_scan_;
  if (this != internal_default_instance()) delete idx_scan_;
  if (this != internal_default_instance()) delete selection_;
  if (this != internal_default_instance()) delete aggregation_;
  if (this != internal_default_instance()) delete topn_;
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete stream_agg_;
}

void Executor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Executor::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Executor& Executor::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsExecutor();
  return *internal_default_instance();
}

Executor* Executor::New(::google::protobuf::Arena* arena) const {
  Executor* n = new Executor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Executor::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.Executor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tbl_scan_ != NULL);
      tbl_scan_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(idx_scan_ != NULL);
      idx_scan_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(selection_ != NULL);
      selection_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(aggregation_ != NULL);
      aggregation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(topn_ != NULL);
      topn_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(limit_ != NULL);
      limit_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(stream_agg_ != NULL);
      stream_agg_->Clear();
    }
  }
  tp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Executor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.Executor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tipb.ExecType tp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tipb::ExecType_IsValid(value)) {
            set_tp(static_cast< ::tipb::ExecType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.TableScan tbl_scan = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tbl_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.IndexScan idx_scan = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_idx_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.Selection selection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.Aggregation aggregation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aggregation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.TopN topN = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.Limit limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.Aggregation stream_agg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stream_agg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.Executor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.Executor)
  return false;
#undef DO_
}

void Executor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.Executor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tipb.ExecType tp = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tp(), output);
  }

  // optional .tipb.TableScan tbl_scan = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tbl_scan_, output);
  }

  // optional .tipb.IndexScan idx_scan = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->idx_scan_, output);
  }

  // optional .tipb.Selection selection = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->selection_, output);
  }

  // optional .tipb.Aggregation aggregation = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->aggregation_, output);
  }

  // optional .tipb.TopN topN = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->topn_, output);
  }

  // optional .tipb.Limit limit = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->limit_, output);
  }

  // optional .tipb.Aggregation stream_agg = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stream_agg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.Executor)
}

::google::protobuf::uint8* Executor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.Executor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tipb.ExecType tp = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tp(), target);
  }

  // optional .tipb.TableScan tbl_scan = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->tbl_scan_, deterministic, target);
  }

  // optional .tipb.IndexScan idx_scan = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->idx_scan_, deterministic, target);
  }

  // optional .tipb.Selection selection = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->selection_, deterministic, target);
  }

  // optional .tipb.Aggregation aggregation = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->aggregation_, deterministic, target);
  }

  // optional .tipb.TopN topN = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->topn_, deterministic, target);
  }

  // optional .tipb.Limit limit = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->limit_, deterministic, target);
  }

  // optional .tipb.Aggregation stream_agg = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->stream_agg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.Executor)
  return target;
}

size_t Executor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.Executor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .tipb.TableScan tbl_scan = 2;
    if (has_tbl_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->tbl_scan_);
    }

    // optional .tipb.IndexScan idx_scan = 3;
    if (has_idx_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->idx_scan_);
    }

    // optional .tipb.Selection selection = 4;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->selection_);
    }

    // optional .tipb.Aggregation aggregation = 5;
    if (has_aggregation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->aggregation_);
    }

    // optional .tipb.TopN topN = 6;
    if (has_topn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->topn_);
    }

    // optional .tipb.Limit limit = 7;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->limit_);
    }

    // optional .tipb.Aggregation stream_agg = 8;
    if (has_stream_agg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->stream_agg_);
    }

    // optional .tipb.ExecType tp = 1;
    if (has_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Executor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.Executor)
  GOOGLE_DCHECK_NE(&from, this);
  const Executor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Executor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.Executor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.Executor)
    MergeFrom(*source);
  }
}

void Executor::MergeFrom(const Executor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.Executor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tbl_scan()->::tipb::TableScan::MergeFrom(from.tbl_scan());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_idx_scan()->::tipb::IndexScan::MergeFrom(from.idx_scan());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_selection()->::tipb::Selection::MergeFrom(from.selection());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_aggregation()->::tipb::Aggregation::MergeFrom(from.aggregation());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_topn()->::tipb::TopN::MergeFrom(from.topn());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_limit()->::tipb::Limit::MergeFrom(from.limit());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_stream_agg()->::tipb::Aggregation::MergeFrom(from.stream_agg());
    }
    if (cached_has_bits & 0x00000080u) {
      tp_ = from.tp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Executor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.Executor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Executor::CopyFrom(const Executor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.Executor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Executor::IsInitialized() const {
  return true;
}

void Executor::Swap(Executor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Executor::InternalSwap(Executor* other) {
  using std::swap;
  swap(tbl_scan_, other->tbl_scan_);
  swap(idx_scan_, other->idx_scan_);
  swap(selection_, other->selection_);
  swap(aggregation_, other->aggregation_);
  swap(topn_, other->topn_);
  swap(limit_, other->limit_);
  swap(stream_agg_, other->stream_agg_);
  swap(tp_, other->tp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Executor::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableScan::InitAsDefaultInstance() {
}
void TableScan::clear_columns() {
  columns_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableScan::kTableIdFieldNumber;
const int TableScan::kColumnsFieldNumber;
const int TableScan::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableScan::TableScan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsTableScan();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.TableScan)
}
TableScan::TableScan(const TableScan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&table_id_, &from.table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&desc_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(desc_));
  // @@protoc_insertion_point(copy_constructor:tipb.TableScan)
}

void TableScan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desc_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(desc_));
}

TableScan::~TableScan() {
  // @@protoc_insertion_point(destructor:tipb.TableScan)
  SharedDtor();
}

void TableScan::SharedDtor() {
}

void TableScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableScan::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableScan& TableScan::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsTableScan();
  return *internal_default_instance();
}

TableScan* TableScan::New(::google::protobuf::Arena* arena) const {
  TableScan* n = new TableScan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableScan::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.TableScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&table_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desc_) -
        reinterpret_cast<char*>(&table_id_)) + sizeof(desc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TableScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.TableScan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 table_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_table_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tipb.ColumnInfo columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_desc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &desc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.TableScan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.TableScan)
  return false;
#undef DO_
}

void TableScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.TableScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->table_id(), output);
  }

  // repeated .tipb.ColumnInfo columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(static_cast<int>(i)), output);
  }

  // optional bool desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.TableScan)
}

::google::protobuf::uint8* TableScan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.TableScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->table_id(), target);
  }

  // repeated .tipb.ColumnInfo columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // optional bool desc = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.TableScan)
  return target;
}

size_t TableScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.TableScan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.ColumnInfo columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->table_id());
    }

    // optional bool desc = 3;
    if (has_desc()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableScan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.TableScan)
  GOOGLE_DCHECK_NE(&from, this);
  const TableScan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableScan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.TableScan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.TableScan)
    MergeFrom(*source);
  }
}

void TableScan::MergeFrom(const TableScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.TableScan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      table_id_ = from.table_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      desc_ = from.desc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TableScan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.TableScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableScan::CopyFrom(const TableScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.TableScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableScan::IsInitialized() const {
  return true;
}

void TableScan::Swap(TableScan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableScan::InternalSwap(TableScan* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(table_id_, other->table_id_);
  swap(desc_, other->desc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableScan::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexScan::InitAsDefaultInstance() {
}
void IndexScan::clear_columns() {
  columns_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexScan::kTableIdFieldNumber;
const int IndexScan::kIndexIdFieldNumber;
const int IndexScan::kColumnsFieldNumber;
const int IndexScan::kDescFieldNumber;
const int IndexScan::kUniqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexScan::IndexScan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsIndexScan();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.IndexScan)
}
IndexScan::IndexScan(const IndexScan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&table_id_, &from.table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(unique_));
  // @@protoc_insertion_point(copy_constructor:tipb.IndexScan)
}

void IndexScan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(unique_));
}

IndexScan::~IndexScan() {
  // @@protoc_insertion_point(destructor:tipb.IndexScan)
  SharedDtor();
}

void IndexScan::SharedDtor() {
}

void IndexScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexScan::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexScan& IndexScan::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsIndexScan();
  return *internal_default_instance();
}

IndexScan* IndexScan::New(::google::protobuf::Arena* arena) const {
  IndexScan* n = new IndexScan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexScan::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.IndexScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&table_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unique_) -
        reinterpret_cast<char*>(&table_id_)) + sizeof(unique_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.IndexScan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 table_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_table_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 index_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_index_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tipb.ColumnInfo columns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_desc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &desc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unique = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_unique();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.IndexScan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.IndexScan)
  return false;
#undef DO_
}

void IndexScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.IndexScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->table_id(), output);
  }

  // optional int64 index_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index_id(), output);
  }

  // repeated .tipb.ColumnInfo columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columns(static_cast<int>(i)), output);
  }

  // optional bool desc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->desc(), output);
  }

  // optional bool unique = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->unique(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.IndexScan)
}

::google::protobuf::uint8* IndexScan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.IndexScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->table_id(), target);
  }

  // optional int64 index_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index_id(), target);
  }

  // repeated .tipb.ColumnInfo columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // optional bool desc = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->desc(), target);
  }

  // optional bool unique = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->unique(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.IndexScan)
  return target;
}

size_t IndexScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.IndexScan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.ColumnInfo columns = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->table_id());
    }

    // optional int64 index_id = 2;
    if (has_index_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index_id());
    }

    // optional bool desc = 4;
    if (has_desc()) {
      total_size += 1 + 1;
    }

    // optional bool unique = 5;
    if (has_unique()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexScan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.IndexScan)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexScan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexScan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.IndexScan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.IndexScan)
    MergeFrom(*source);
  }
}

void IndexScan::MergeFrom(const IndexScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.IndexScan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      table_id_ = from.table_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      index_id_ = from.index_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      desc_ = from.desc_;
    }
    if (cached_has_bits & 0x00000008u) {
      unique_ = from.unique_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexScan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.IndexScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexScan::CopyFrom(const IndexScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.IndexScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexScan::IsInitialized() const {
  return true;
}

void IndexScan::Swap(IndexScan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexScan::InternalSwap(IndexScan* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(table_id_, other->table_id_);
  swap(index_id_, other->index_id_);
  swap(desc_, other->desc_);
  swap(unique_, other->unique_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexScan::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Selection::InitAsDefaultInstance() {
}
void Selection::clear_conditions() {
  conditions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Selection::kConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Selection::Selection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsSelection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.Selection)
}
Selection::Selection(const Selection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tipb.Selection)
}

void Selection::SharedCtor() {
  _cached_size_ = 0;
}

Selection::~Selection() {
  // @@protoc_insertion_point(destructor:tipb.Selection)
  SharedDtor();
}

void Selection::SharedDtor() {
}

void Selection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Selection::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Selection& Selection::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsSelection();
  return *internal_default_instance();
}

Selection* Selection::New(::google::protobuf::Arena* arena) const {
  Selection* n = new Selection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Selection::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.Selection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Selection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.Selection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tipb.Expr conditions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.Selection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.Selection)
  return false;
#undef DO_
}

void Selection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.Selection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.Expr conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->conditions(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.Selection)
}

::google::protobuf::uint8* Selection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.Selection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.Expr conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->conditions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.Selection)
  return target;
}

size_t Selection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.Selection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.Expr conditions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->conditions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->conditions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Selection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.Selection)
  GOOGLE_DCHECK_NE(&from, this);
  const Selection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Selection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.Selection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.Selection)
    MergeFrom(*source);
  }
}

void Selection::MergeFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.Selection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
}

void Selection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selection::CopyFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection::IsInitialized() const {
  return true;
}

void Selection::Swap(Selection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Selection::InternalSwap(Selection* other) {
  using std::swap;
  conditions_.InternalSwap(&other->conditions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Selection::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Projection::InitAsDefaultInstance() {
}
void Projection::clear_exprs() {
  exprs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Projection::kExprsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Projection::Projection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsProjection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.Projection)
}
Projection::Projection(const Projection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      exprs_(from.exprs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tipb.Projection)
}

void Projection::SharedCtor() {
  _cached_size_ = 0;
}

Projection::~Projection() {
  // @@protoc_insertion_point(destructor:tipb.Projection)
  SharedDtor();
}

void Projection::SharedDtor() {
}

void Projection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Projection::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Projection& Projection::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsProjection();
  return *internal_default_instance();
}

Projection* Projection::New(::google::protobuf::Arena* arena) const {
  Projection* n = new Projection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exprs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Projection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.Projection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tipb.Expr exprs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_exprs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.Projection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.Projection)
  return false;
#undef DO_
}

void Projection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.Expr exprs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exprs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exprs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.Projection)
}

::google::protobuf::uint8* Projection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.Expr exprs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exprs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->exprs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.Projection)
  return target;
}

size_t Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.Projection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.Expr exprs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->exprs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exprs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Projection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  const Projection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Projection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.Projection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.Projection)
    MergeFrom(*source);
  }
}

void Projection::MergeFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exprs_.MergeFrom(from.exprs_);
}

void Projection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projection::CopyFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projection::IsInitialized() const {
  return true;
}

void Projection::Swap(Projection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Projection::InternalSwap(Projection* other) {
  using std::swap;
  exprs_.InternalSwap(&other->exprs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Projection::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Aggregation::InitAsDefaultInstance() {
}
void Aggregation::clear_group_by() {
  group_by_.Clear();
}
void Aggregation::clear_agg_func() {
  agg_func_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Aggregation::kGroupByFieldNumber;
const int Aggregation::kAggFuncFieldNumber;
const int Aggregation::kStreamedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Aggregation::Aggregation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsAggregation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.Aggregation)
}
Aggregation::Aggregation(const Aggregation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      group_by_(from.group_by_),
      agg_func_(from.agg_func_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  streamed_ = from.streamed_;
  // @@protoc_insertion_point(copy_constructor:tipb.Aggregation)
}

void Aggregation::SharedCtor() {
  _cached_size_ = 0;
  streamed_ = false;
}

Aggregation::~Aggregation() {
  // @@protoc_insertion_point(destructor:tipb.Aggregation)
  SharedDtor();
}

void Aggregation::SharedDtor() {
}

void Aggregation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aggregation::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Aggregation& Aggregation::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsAggregation();
  return *internal_default_instance();
}

Aggregation* Aggregation::New(::google::protobuf::Arena* arena) const {
  Aggregation* n = new Aggregation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Aggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.Aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_by_.Clear();
  agg_func_.Clear();
  streamed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Aggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.Aggregation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tipb.Expr group_by = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_group_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tipb.Expr agg_func = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_agg_func()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streamed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_streamed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streamed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.Aggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.Aggregation)
  return false;
#undef DO_
}

void Aggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.Aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.Expr group_by = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_by_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_by(static_cast<int>(i)), output);
  }

  // repeated .tipb.Expr agg_func = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->agg_func_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->agg_func(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool streamed = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->streamed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.Aggregation)
}

::google::protobuf::uint8* Aggregation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.Aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.Expr group_by = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_by_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->group_by(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tipb.Expr agg_func = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->agg_func_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->agg_func(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool streamed = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->streamed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.Aggregation)
  return target;
}

size_t Aggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.Aggregation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.Expr group_by = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->group_by_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->group_by(static_cast<int>(i)));
    }
  }

  // repeated .tipb.Expr agg_func = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->agg_func_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->agg_func(static_cast<int>(i)));
    }
  }

  // optional bool streamed = 3;
  if (has_streamed()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aggregation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.Aggregation)
  GOOGLE_DCHECK_NE(&from, this);
  const Aggregation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Aggregation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.Aggregation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.Aggregation)
    MergeFrom(*source);
  }
}

void Aggregation::MergeFrom(const Aggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.Aggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_by_.MergeFrom(from.group_by_);
  agg_func_.MergeFrom(from.agg_func_);
  if (from.has_streamed()) {
    set_streamed(from.streamed());
  }
}

void Aggregation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.Aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aggregation::CopyFrom(const Aggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.Aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregation::IsInitialized() const {
  return true;
}

void Aggregation::Swap(Aggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Aggregation::InternalSwap(Aggregation* other) {
  using std::swap;
  group_by_.InternalSwap(&other->group_by_);
  agg_func_.InternalSwap(&other->agg_func_);
  swap(streamed_, other->streamed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Aggregation::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TopN::InitAsDefaultInstance() {
}
void TopN::clear_order_by() {
  order_by_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopN::kOrderByFieldNumber;
const int TopN::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopN::TopN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsTopN();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.TopN)
}
TopN::TopN(const TopN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      order_by_(from.order_by_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:tipb.TopN)
}

void TopN::SharedCtor() {
  _cached_size_ = 0;
  limit_ = GOOGLE_ULONGLONG(0);
}

TopN::~TopN() {
  // @@protoc_insertion_point(destructor:tipb.TopN)
  SharedDtor();
}

void TopN::SharedDtor() {
}

void TopN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopN::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopN& TopN::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsTopN();
  return *internal_default_instance();
}

TopN* TopN::New(::google::protobuf::Arena* arena) const {
  TopN* n = new TopN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopN::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.TopN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_by_.Clear();
  limit_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.TopN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tipb.ByItem order_by = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_order_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.TopN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.TopN)
  return false;
#undef DO_
}

void TopN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.TopN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.ByItem order_by = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_by_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order_by(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 limit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.TopN)
}

::google::protobuf::uint8* TopN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.TopN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.ByItem order_by = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_by_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->order_by(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 limit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.TopN)
  return target;
}

size_t TopN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.TopN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.ByItem order_by = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->order_by_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_by(static_cast<int>(i)));
    }
  }

  // optional uint64 limit = 2;
  if (has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.TopN)
  GOOGLE_DCHECK_NE(&from, this);
  const TopN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.TopN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.TopN)
    MergeFrom(*source);
  }
}

void TopN::MergeFrom(const TopN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.TopN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_by_.MergeFrom(from.order_by_);
  if (from.has_limit()) {
    set_limit(from.limit());
  }
}

void TopN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.TopN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopN::CopyFrom(const TopN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.TopN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopN::IsInitialized() const {
  return true;
}

void TopN::Swap(TopN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopN::InternalSwap(TopN* other) {
  using std::swap;
  order_by_.InternalSwap(&other->order_by_);
  swap(limit_, other->limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopN::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Limit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Limit::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Limit::Limit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsLimit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.Limit)
}
Limit::Limit(const Limit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:tipb.Limit)
}

void Limit::SharedCtor() {
  _cached_size_ = 0;
  limit_ = GOOGLE_ULONGLONG(0);
}

Limit::~Limit() {
  // @@protoc_insertion_point(destructor:tipb.Limit)
  SharedDtor();
}

void Limit::SharedDtor() {
}

void Limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Limit::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Limit& Limit::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsLimit();
  return *internal_default_instance();
}

Limit* Limit::New(::google::protobuf::Arena* arena) const {
  Limit* n = new Limit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.Limit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.Limit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.Limit)
  return false;
#undef DO_
}

void Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 limit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.Limit)
}

::google::protobuf::uint8* Limit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.Limit)
  return target;
}

size_t Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.Limit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 limit = 1;
  if (has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Limit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  const Limit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Limit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.Limit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.Limit)
    MergeFrom(*source);
  }
}

void Limit::MergeFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_limit()) {
    set_limit(from.limit());
  }
}

void Limit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Limit::CopyFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limit::IsInitialized() const {
  return true;
}

void Limit::Swap(Limit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Limit::InternalSwap(Limit* other) {
  using std::swap;
  swap(limit_, other->limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Limit::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecutorExecutionSummary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutorExecutionSummary::kTimeProcessedNsFieldNumber;
const int ExecutorExecutionSummary::kNumProducedRowsFieldNumber;
const int ExecutorExecutionSummary::kNumIterationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutorExecutionSummary::ExecutorExecutionSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_executor_2eproto::InitDefaultsExecutorExecutionSummary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.ExecutorExecutionSummary)
}
ExecutorExecutionSummary::ExecutorExecutionSummary(const ExecutorExecutionSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_processed_ns_, &from.time_processed_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_iterations_) -
    reinterpret_cast<char*>(&time_processed_ns_)) + sizeof(num_iterations_));
  // @@protoc_insertion_point(copy_constructor:tipb.ExecutorExecutionSummary)
}

void ExecutorExecutionSummary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_processed_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_iterations_) -
      reinterpret_cast<char*>(&time_processed_ns_)) + sizeof(num_iterations_));
}

ExecutorExecutionSummary::~ExecutorExecutionSummary() {
  // @@protoc_insertion_point(destructor:tipb.ExecutorExecutionSummary)
  SharedDtor();
}

void ExecutorExecutionSummary::SharedDtor() {
}

void ExecutorExecutionSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorExecutionSummary::descriptor() {
  ::protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecutorExecutionSummary& ExecutorExecutionSummary::default_instance() {
  ::protobuf_executor_2eproto::InitDefaultsExecutorExecutionSummary();
  return *internal_default_instance();
}

ExecutorExecutionSummary* ExecutorExecutionSummary::New(::google::protobuf::Arena* arena) const {
  ExecutorExecutionSummary* n = new ExecutorExecutionSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecutorExecutionSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.ExecutorExecutionSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&time_processed_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_iterations_) -
        reinterpret_cast<char*>(&time_processed_ns_)) + sizeof(num_iterations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExecutorExecutionSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.ExecutorExecutionSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time_processed_ns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time_processed_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_processed_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_produced_rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_produced_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_produced_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_iterations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.ExecutorExecutionSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.ExecutorExecutionSummary)
  return false;
#undef DO_
}

void ExecutorExecutionSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.ExecutorExecutionSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 time_processed_ns = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_processed_ns(), output);
  }

  // optional uint64 num_produced_rows = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_produced_rows(), output);
  }

  // optional uint64 num_iterations = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->num_iterations(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.ExecutorExecutionSummary)
}

::google::protobuf::uint8* ExecutorExecutionSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.ExecutorExecutionSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 time_processed_ns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_processed_ns(), target);
  }

  // optional uint64 num_produced_rows = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num_produced_rows(), target);
  }

  // optional uint64 num_iterations = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->num_iterations(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.ExecutorExecutionSummary)
  return target;
}

size_t ExecutorExecutionSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.ExecutorExecutionSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 time_processed_ns = 1;
    if (has_time_processed_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_processed_ns());
    }

    // optional uint64 num_produced_rows = 2;
    if (has_num_produced_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_produced_rows());
    }

    // optional uint64 num_iterations = 3;
    if (has_num_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_iterations());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorExecutionSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.ExecutorExecutionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutorExecutionSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutorExecutionSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.ExecutorExecutionSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.ExecutorExecutionSummary)
    MergeFrom(*source);
  }
}

void ExecutorExecutionSummary::MergeFrom(const ExecutorExecutionSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.ExecutorExecutionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      time_processed_ns_ = from.time_processed_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_produced_rows_ = from.num_produced_rows_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_iterations_ = from.num_iterations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExecutorExecutionSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.ExecutorExecutionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorExecutionSummary::CopyFrom(const ExecutorExecutionSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.ExecutorExecutionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorExecutionSummary::IsInitialized() const {
  return true;
}

void ExecutorExecutionSummary::Swap(ExecutorExecutionSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutorExecutionSummary::InternalSwap(ExecutorExecutionSummary* other) {
  using std::swap;
  swap(time_processed_ns_, other->time_processed_ns_);
  swap(num_produced_rows_, other->num_produced_rows_);
  swap(num_iterations_, other->num_iterations_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutorExecutionSummary::GetMetadata() const {
  protobuf_executor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_executor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tipb

// @@protoc_insertion_point(global_scope)
