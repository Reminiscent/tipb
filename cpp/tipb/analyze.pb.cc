// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analyze.proto

#include "analyze.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tipb {
class AnalyzeReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeReq>
      _instance;
} _AnalyzeReq_default_instance_;
class AnalyzeIndexReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeIndexReq>
      _instance;
} _AnalyzeIndexReq_default_instance_;
class AnalyzeColumnsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeColumnsReq>
      _instance;
} _AnalyzeColumnsReq_default_instance_;
class AnalyzeColumnsRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeColumnsResp>
      _instance;
} _AnalyzeColumnsResp_default_instance_;
class AnalyzeIndexRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeIndexResp>
      _instance;
} _AnalyzeIndexResp_default_instance_;
class BucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bucket>
      _instance;
} _Bucket_default_instance_;
class HistogramDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Histogram>
      _instance;
} _Histogram_default_instance_;
class FMSketchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FMSketch>
      _instance;
} _FMSketch_default_instance_;
class SampleCollectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SampleCollector>
      _instance;
} _SampleCollector_default_instance_;
class CMSketchRowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMSketchRow>
      _instance;
} _CMSketchRow_default_instance_;
class CMSketchTopNDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMSketchTopN>
      _instance;
} _CMSketchTopN_default_instance_;
class CMSketchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMSketch>
      _instance;
} _CMSketch_default_instance_;
}  // namespace tipb
namespace protobuf_analyze_2eproto {
void InitDefaultsAnalyzeReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_analyze_2eproto::InitDefaultsAnalyzeIndexReq();
  protobuf_analyze_2eproto::InitDefaultsAnalyzeColumnsReq();
  {
    void* ptr = &::tipb::_AnalyzeReq_default_instance_;
    new (ptr) ::tipb::AnalyzeReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::AnalyzeReq::InitAsDefaultInstance();
}

void InitDefaultsAnalyzeReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAnalyzeReqImpl);
}

void InitDefaultsAnalyzeIndexReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_AnalyzeIndexReq_default_instance_;
    new (ptr) ::tipb::AnalyzeIndexReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::AnalyzeIndexReq::InitAsDefaultInstance();
}

void InitDefaultsAnalyzeIndexReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAnalyzeIndexReqImpl);
}

void InitDefaultsAnalyzeColumnsReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schema_2eproto::InitDefaultsColumnInfo();
  {
    void* ptr = &::tipb::_AnalyzeColumnsReq_default_instance_;
    new (ptr) ::tipb::AnalyzeColumnsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::AnalyzeColumnsReq::InitAsDefaultInstance();
}

void InitDefaultsAnalyzeColumnsReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAnalyzeColumnsReqImpl);
}

void InitDefaultsAnalyzeColumnsRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_analyze_2eproto::InitDefaultsSampleCollector();
  protobuf_analyze_2eproto::InitDefaultsHistogram();
  {
    void* ptr = &::tipb::_AnalyzeColumnsResp_default_instance_;
    new (ptr) ::tipb::AnalyzeColumnsResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::AnalyzeColumnsResp::InitAsDefaultInstance();
}

void InitDefaultsAnalyzeColumnsResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAnalyzeColumnsRespImpl);
}

void InitDefaultsAnalyzeIndexRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_analyze_2eproto::InitDefaultsHistogram();
  protobuf_analyze_2eproto::InitDefaultsCMSketch();
  {
    void* ptr = &::tipb::_AnalyzeIndexResp_default_instance_;
    new (ptr) ::tipb::AnalyzeIndexResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::AnalyzeIndexResp::InitAsDefaultInstance();
}

void InitDefaultsAnalyzeIndexResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAnalyzeIndexRespImpl);
}

void InitDefaultsBucketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_Bucket_default_instance_;
    new (ptr) ::tipb::Bucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::Bucket::InitAsDefaultInstance();
}

void InitDefaultsBucket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBucketImpl);
}

void InitDefaultsHistogramImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_analyze_2eproto::InitDefaultsBucket();
  {
    void* ptr = &::tipb::_Histogram_default_instance_;
    new (ptr) ::tipb::Histogram();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::Histogram::InitAsDefaultInstance();
}

void InitDefaultsHistogram() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHistogramImpl);
}

void InitDefaultsFMSketchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_FMSketch_default_instance_;
    new (ptr) ::tipb::FMSketch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::FMSketch::InitAsDefaultInstance();
}

void InitDefaultsFMSketch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFMSketchImpl);
}

void InitDefaultsSampleCollectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_analyze_2eproto::InitDefaultsFMSketch();
  protobuf_analyze_2eproto::InitDefaultsCMSketch();
  {
    void* ptr = &::tipb::_SampleCollector_default_instance_;
    new (ptr) ::tipb::SampleCollector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::SampleCollector::InitAsDefaultInstance();
}

void InitDefaultsSampleCollector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSampleCollectorImpl);
}

void InitDefaultsCMSketchRowImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_CMSketchRow_default_instance_;
    new (ptr) ::tipb::CMSketchRow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::CMSketchRow::InitAsDefaultInstance();
}

void InitDefaultsCMSketchRow() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMSketchRowImpl);
}

void InitDefaultsCMSketchTopNImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tipb::_CMSketchTopN_default_instance_;
    new (ptr) ::tipb::CMSketchTopN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::CMSketchTopN::InitAsDefaultInstance();
}

void InitDefaultsCMSketchTopN() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMSketchTopNImpl);
}

void InitDefaultsCMSketchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_analyze_2eproto::InitDefaultsCMSketchRow();
  protobuf_analyze_2eproto::InitDefaultsCMSketchTopN();
  {
    void* ptr = &::tipb::_CMSketch_default_instance_;
    new (ptr) ::tipb::CMSketch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tipb::CMSketch::InitAsDefaultInstance();
}

void InitDefaultsCMSketch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMSketchImpl);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeReq, tp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeReq, start_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeReq, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeReq, time_zone_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeReq, idx_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeReq, col_req_),
  5,
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexReq, bucket_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexReq, num_columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexReq, cmsketch_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexReq, cmsketch_width_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsReq, bucket_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsReq, sample_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsReq, sketch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsReq, columns_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsReq, cmsketch_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsReq, cmsketch_width_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsResp, collectors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeColumnsResp, pk_hist_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexResp, hist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::AnalyzeIndexResp, cms_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Bucket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Bucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Bucket, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Bucket, lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Bucket, upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Bucket, repeats_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Histogram, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Histogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Histogram, ndv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::Histogram, buckets_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::FMSketch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::FMSketch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::FMSketch, mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::FMSketch, hashset_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::SampleCollector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::SampleCollector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::SampleCollector, samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::SampleCollector, null_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::SampleCollector, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::SampleCollector, fm_sketch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::SampleCollector, cm_sketch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::SampleCollector, total_size_),
  ~0u,
  2,
  3,
  0,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketchRow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketchRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketchRow, counters_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketchTopN, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketchTopN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketchTopN, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketchTopN, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketch, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketch, top_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tipb::CMSketch, default_value_),
  ~0u,
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::tipb::AnalyzeReq)},
  { 17, 26, sizeof(::tipb::AnalyzeIndexReq)},
  { 30, 41, sizeof(::tipb::AnalyzeColumnsReq)},
  { 47, 54, sizeof(::tipb::AnalyzeColumnsResp)},
  { 56, 63, sizeof(::tipb::AnalyzeIndexResp)},
  { 65, 74, sizeof(::tipb::Bucket)},
  { 78, 85, sizeof(::tipb::Histogram)},
  { 87, 94, sizeof(::tipb::FMSketch)},
  { 96, 107, sizeof(::tipb::SampleCollector)},
  { 113, 119, sizeof(::tipb::CMSketchRow)},
  { 120, 127, sizeof(::tipb::CMSketchTopN)},
  { 129, 137, sizeof(::tipb::CMSketch)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_AnalyzeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_AnalyzeIndexReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_AnalyzeColumnsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_AnalyzeColumnsResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_AnalyzeIndexResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_Bucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_Histogram_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_FMSketch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_SampleCollector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_CMSketchRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_CMSketchTopN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tipb::_CMSketch_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "analyze.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ranalyze.proto\022\004tipb\032\014schema.proto\"\270\001\n\n"
      "AnalyzeReq\022\035\n\002tp\030\001 \001(\0162\021.tipb.AnalyzeTyp"
      "e\022\020\n\010start_ts\030\002 \001(\004\022\r\n\005flags\030\003 \001(\004\022\030\n\020ti"
      "me_zone_offset\030\004 \001(\003\022&\n\007idx_req\030\005 \001(\0132\025."
      "tipb.AnalyzeIndexReq\022(\n\007col_req\030\006 \001(\0132\027."
      "tipb.AnalyzeColumnsReq\"k\n\017AnalyzeIndexRe"
      "q\022\023\n\013bucket_size\030\001 \001(\003\022\023\n\013num_columns\030\002 "
      "\001(\005\022\026\n\016cmsketch_depth\030\003 \001(\005\022\026\n\016cmsketch_"
      "width\030\004 \001(\005\"\252\001\n\021AnalyzeColumnsReq\022\023\n\013buc"
      "ket_size\030\001 \001(\003\022\023\n\013sample_size\030\002 \001(\003\022\023\n\013s"
      "ketch_size\030\003 \001(\003\022&\n\014columns_info\030\004 \003(\0132\020"
      ".tipb.ColumnInfo\022\026\n\016cmsketch_depth\030\005 \001(\005"
      "\022\026\n\016cmsketch_width\030\006 \001(\005\"a\n\022AnalyzeColum"
      "nsResp\022)\n\ncollectors\030\001 \003(\0132\025.tipb.Sample"
      "Collector\022 \n\007pk_hist\030\002 \001(\0132\017.tipb.Histog"
      "ram\"N\n\020AnalyzeIndexResp\022\035\n\004hist\030\001 \001(\0132\017."
      "tipb.Histogram\022\033\n\003cms\030\002 \001(\0132\016.tipb.CMSke"
      "tch\"R\n\006Bucket\022\r\n\005count\030\001 \001(\003\022\023\n\013lower_bo"
      "und\030\002 \001(\014\022\023\n\013upper_bound\030\003 \001(\014\022\017\n\007repeat"
      "s\030\004 \001(\003\"7\n\tHistogram\022\013\n\003ndv\030\001 \001(\003\022\035\n\007buc"
      "kets\030\002 \003(\0132\014.tipb.Bucket\")\n\010FMSketch\022\014\n\004"
      "mask\030\001 \001(\004\022\017\n\007hashset\030\002 \003(\004\"\237\001\n\017SampleCo"
      "llector\022\017\n\007samples\030\001 \003(\014\022\022\n\nnull_count\030\002"
      " \001(\003\022\r\n\005count\030\003 \001(\003\022!\n\tfm_sketch\030\004 \001(\0132\016"
      ".tipb.FMSketch\022!\n\tcm_sketch\030\005 \001(\0132\016.tipb"
      ".CMSketch\022\022\n\ntotal_size\030\006 \001(\003\"\037\n\013CMSketc"
      "hRow\022\020\n\010counters\030\001 \003(\r\"+\n\014CMSketchTopN\022\014"
      "\n\004data\030\001 \001(\014\022\r\n\005count\030\002 \001(\004\"e\n\010CMSketch\022"
      "\037\n\004rows\030\001 \003(\0132\021.tipb.CMSketchRow\022!\n\005top_"
      "n\030\002 \003(\0132\022.tipb.CMSketchTopN\022\025\n\rdefault_v"
      "alue\030\003 \001(\004*,\n\013AnalyzeType\022\r\n\tTypeIndex\020\000"
      "\022\016\n\nTypeColumn\020\001B\031\n\025com.pingcap.tidb.tip"
      "bP\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "analyze.proto", &protobuf_RegisterTypes);
  ::protobuf_schema_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_analyze_2eproto
namespace tipb {
const ::google::protobuf::EnumDescriptor* AnalyzeType_descriptor() {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_analyze_2eproto::file_level_enum_descriptors[0];
}
bool AnalyzeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AnalyzeReq::InitAsDefaultInstance() {
  ::tipb::_AnalyzeReq_default_instance_._instance.get_mutable()->idx_req_ = const_cast< ::tipb::AnalyzeIndexReq*>(
      ::tipb::AnalyzeIndexReq::internal_default_instance());
  ::tipb::_AnalyzeReq_default_instance_._instance.get_mutable()->col_req_ = const_cast< ::tipb::AnalyzeColumnsReq*>(
      ::tipb::AnalyzeColumnsReq::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeReq::kTpFieldNumber;
const int AnalyzeReq::kStartTsFieldNumber;
const int AnalyzeReq::kFlagsFieldNumber;
const int AnalyzeReq::kTimeZoneOffsetFieldNumber;
const int AnalyzeReq::kIdxReqFieldNumber;
const int AnalyzeReq::kColReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeReq::AnalyzeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsAnalyzeReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.AnalyzeReq)
}
AnalyzeReq::AnalyzeReq(const AnalyzeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_idx_req()) {
    idx_req_ = new ::tipb::AnalyzeIndexReq(*from.idx_req_);
  } else {
    idx_req_ = NULL;
  }
  if (from.has_col_req()) {
    col_req_ = new ::tipb::AnalyzeColumnsReq(*from.col_req_);
  } else {
    col_req_ = NULL;
  }
  ::memcpy(&start_ts_, &from.start_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&tp_) -
    reinterpret_cast<char*>(&start_ts_)) + sizeof(tp_));
  // @@protoc_insertion_point(copy_constructor:tipb.AnalyzeReq)
}

void AnalyzeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&idx_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&idx_req_)) + sizeof(tp_));
}

AnalyzeReq::~AnalyzeReq() {
  // @@protoc_insertion_point(destructor:tipb.AnalyzeReq)
  SharedDtor();
}

void AnalyzeReq::SharedDtor() {
  if (this != internal_default_instance()) delete idx_req_;
  if (this != internal_default_instance()) delete col_req_;
}

void AnalyzeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeReq::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeReq& AnalyzeReq::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsAnalyzeReq();
  return *internal_default_instance();
}

AnalyzeReq* AnalyzeReq::New(::google::protobuf::Arena* arena) const {
  AnalyzeReq* n = new AnalyzeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.AnalyzeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(idx_req_ != NULL);
      idx_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(col_req_ != NULL);
      col_req_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&start_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tp_) -
        reinterpret_cast<char*>(&start_ts_)) + sizeof(tp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnalyzeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.AnalyzeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tipb.AnalyzeType tp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tipb::AnalyzeType_IsValid(value)) {
            set_tp(static_cast< ::tipb::AnalyzeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_start_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_zone_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_time_zone_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_zone_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.AnalyzeIndexReq idx_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_idx_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.AnalyzeColumnsReq col_req = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_col_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.AnalyzeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.AnalyzeReq)
  return false;
#undef DO_
}

void AnalyzeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.AnalyzeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tipb.AnalyzeType tp = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tp(), output);
  }

  // optional uint64 start_ts = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_ts(), output);
  }

  // optional uint64 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flags(), output);
  }

  // optional int64 time_zone_offset = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_zone_offset(), output);
  }

  // optional .tipb.AnalyzeIndexReq idx_req = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->idx_req_, output);
  }

  // optional .tipb.AnalyzeColumnsReq col_req = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->col_req_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.AnalyzeReq)
}

::google::protobuf::uint8* AnalyzeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.AnalyzeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tipb.AnalyzeType tp = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tp(), target);
  }

  // optional uint64 start_ts = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_ts(), target);
  }

  // optional uint64 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->flags(), target);
  }

  // optional int64 time_zone_offset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_zone_offset(), target);
  }

  // optional .tipb.AnalyzeIndexReq idx_req = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->idx_req_, deterministic, target);
  }

  // optional .tipb.AnalyzeColumnsReq col_req = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->col_req_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.AnalyzeReq)
  return target;
}

size_t AnalyzeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.AnalyzeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .tipb.AnalyzeIndexReq idx_req = 5;
    if (has_idx_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->idx_req_);
    }

    // optional .tipb.AnalyzeColumnsReq col_req = 6;
    if (has_col_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->col_req_);
    }

    // optional uint64 start_ts = 2;
    if (has_start_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_ts());
    }

    // optional uint64 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flags());
    }

    // optional int64 time_zone_offset = 4;
    if (has_time_zone_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_zone_offset());
    }

    // optional .tipb.AnalyzeType tp = 1;
    if (has_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.AnalyzeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.AnalyzeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.AnalyzeReq)
    MergeFrom(*source);
  }
}

void AnalyzeReq::MergeFrom(const AnalyzeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.AnalyzeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_idx_req()->::tipb::AnalyzeIndexReq::MergeFrom(from.idx_req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_col_req()->::tipb::AnalyzeColumnsReq::MergeFrom(from.col_req());
    }
    if (cached_has_bits & 0x00000004u) {
      start_ts_ = from.start_ts_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_zone_offset_ = from.time_zone_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      tp_ = from.tp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnalyzeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.AnalyzeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeReq::CopyFrom(const AnalyzeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.AnalyzeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeReq::IsInitialized() const {
  return true;
}

void AnalyzeReq::Swap(AnalyzeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeReq::InternalSwap(AnalyzeReq* other) {
  using std::swap;
  swap(idx_req_, other->idx_req_);
  swap(col_req_, other->col_req_);
  swap(start_ts_, other->start_ts_);
  swap(flags_, other->flags_);
  swap(time_zone_offset_, other->time_zone_offset_);
  swap(tp_, other->tp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeReq::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeIndexReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeIndexReq::kBucketSizeFieldNumber;
const int AnalyzeIndexReq::kNumColumnsFieldNumber;
const int AnalyzeIndexReq::kCmsketchDepthFieldNumber;
const int AnalyzeIndexReq::kCmsketchWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeIndexReq::AnalyzeIndexReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsAnalyzeIndexReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.AnalyzeIndexReq)
}
AnalyzeIndexReq::AnalyzeIndexReq(const AnalyzeIndexReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bucket_size_, &from.bucket_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmsketch_width_) -
    reinterpret_cast<char*>(&bucket_size_)) + sizeof(cmsketch_width_));
  // @@protoc_insertion_point(copy_constructor:tipb.AnalyzeIndexReq)
}

void AnalyzeIndexReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bucket_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmsketch_width_) -
      reinterpret_cast<char*>(&bucket_size_)) + sizeof(cmsketch_width_));
}

AnalyzeIndexReq::~AnalyzeIndexReq() {
  // @@protoc_insertion_point(destructor:tipb.AnalyzeIndexReq)
  SharedDtor();
}

void AnalyzeIndexReq::SharedDtor() {
}

void AnalyzeIndexReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeIndexReq::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeIndexReq& AnalyzeIndexReq::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsAnalyzeIndexReq();
  return *internal_default_instance();
}

AnalyzeIndexReq* AnalyzeIndexReq::New(::google::protobuf::Arena* arena) const {
  AnalyzeIndexReq* n = new AnalyzeIndexReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeIndexReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.AnalyzeIndexReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&bucket_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmsketch_width_) -
        reinterpret_cast<char*>(&bucket_size_)) + sizeof(cmsketch_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnalyzeIndexReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.AnalyzeIndexReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bucket_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bucket_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_columns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmsketch_depth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cmsketch_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmsketch_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmsketch_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cmsketch_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmsketch_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.AnalyzeIndexReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.AnalyzeIndexReq)
  return false;
#undef DO_
}

void AnalyzeIndexReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.AnalyzeIndexReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bucket_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bucket_size(), output);
  }

  // optional int32 num_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_columns(), output);
  }

  // optional int32 cmsketch_depth = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmsketch_depth(), output);
  }

  // optional int32 cmsketch_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cmsketch_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.AnalyzeIndexReq)
}

::google::protobuf::uint8* AnalyzeIndexReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.AnalyzeIndexReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bucket_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bucket_size(), target);
  }

  // optional int32 num_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_columns(), target);
  }

  // optional int32 cmsketch_depth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmsketch_depth(), target);
  }

  // optional int32 cmsketch_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cmsketch_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.AnalyzeIndexReq)
  return target;
}

size_t AnalyzeIndexReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.AnalyzeIndexReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 bucket_size = 1;
    if (has_bucket_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bucket_size());
    }

    // optional int32 num_columns = 2;
    if (has_num_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_columns());
    }

    // optional int32 cmsketch_depth = 3;
    if (has_cmsketch_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmsketch_depth());
    }

    // optional int32 cmsketch_width = 4;
    if (has_cmsketch_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmsketch_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeIndexReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.AnalyzeIndexReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeIndexReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeIndexReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.AnalyzeIndexReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.AnalyzeIndexReq)
    MergeFrom(*source);
  }
}

void AnalyzeIndexReq::MergeFrom(const AnalyzeIndexReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.AnalyzeIndexReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      bucket_size_ = from.bucket_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_columns_ = from.num_columns_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmsketch_depth_ = from.cmsketch_depth_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmsketch_width_ = from.cmsketch_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnalyzeIndexReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.AnalyzeIndexReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeIndexReq::CopyFrom(const AnalyzeIndexReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.AnalyzeIndexReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeIndexReq::IsInitialized() const {
  return true;
}

void AnalyzeIndexReq::Swap(AnalyzeIndexReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeIndexReq::InternalSwap(AnalyzeIndexReq* other) {
  using std::swap;
  swap(bucket_size_, other->bucket_size_);
  swap(num_columns_, other->num_columns_);
  swap(cmsketch_depth_, other->cmsketch_depth_);
  swap(cmsketch_width_, other->cmsketch_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeIndexReq::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeColumnsReq::InitAsDefaultInstance() {
}
void AnalyzeColumnsReq::clear_columns_info() {
  columns_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeColumnsReq::kBucketSizeFieldNumber;
const int AnalyzeColumnsReq::kSampleSizeFieldNumber;
const int AnalyzeColumnsReq::kSketchSizeFieldNumber;
const int AnalyzeColumnsReq::kColumnsInfoFieldNumber;
const int AnalyzeColumnsReq::kCmsketchDepthFieldNumber;
const int AnalyzeColumnsReq::kCmsketchWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeColumnsReq::AnalyzeColumnsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsAnalyzeColumnsReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.AnalyzeColumnsReq)
}
AnalyzeColumnsReq::AnalyzeColumnsReq(const AnalyzeColumnsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      columns_info_(from.columns_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bucket_size_, &from.bucket_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmsketch_width_) -
    reinterpret_cast<char*>(&bucket_size_)) + sizeof(cmsketch_width_));
  // @@protoc_insertion_point(copy_constructor:tipb.AnalyzeColumnsReq)
}

void AnalyzeColumnsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bucket_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmsketch_width_) -
      reinterpret_cast<char*>(&bucket_size_)) + sizeof(cmsketch_width_));
}

AnalyzeColumnsReq::~AnalyzeColumnsReq() {
  // @@protoc_insertion_point(destructor:tipb.AnalyzeColumnsReq)
  SharedDtor();
}

void AnalyzeColumnsReq::SharedDtor() {
}

void AnalyzeColumnsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeColumnsReq::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeColumnsReq& AnalyzeColumnsReq::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsAnalyzeColumnsReq();
  return *internal_default_instance();
}

AnalyzeColumnsReq* AnalyzeColumnsReq::New(::google::protobuf::Arena* arena) const {
  AnalyzeColumnsReq* n = new AnalyzeColumnsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeColumnsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.AnalyzeColumnsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&bucket_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmsketch_width_) -
        reinterpret_cast<char*>(&bucket_size_)) + sizeof(cmsketch_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnalyzeColumnsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.AnalyzeColumnsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bucket_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bucket_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sample_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sample_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sample_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sketch_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sketch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sketch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tipb.ColumnInfo columns_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_columns_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmsketch_depth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cmsketch_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmsketch_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmsketch_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cmsketch_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmsketch_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.AnalyzeColumnsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.AnalyzeColumnsReq)
  return false;
#undef DO_
}

void AnalyzeColumnsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.AnalyzeColumnsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bucket_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bucket_size(), output);
  }

  // optional int64 sample_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sample_size(), output);
  }

  // optional int64 sketch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sketch_size(), output);
  }

  // repeated .tipb.ColumnInfo columns_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->columns_info(static_cast<int>(i)), output);
  }

  // optional int32 cmsketch_depth = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cmsketch_depth(), output);
  }

  // optional int32 cmsketch_width = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cmsketch_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.AnalyzeColumnsReq)
}

::google::protobuf::uint8* AnalyzeColumnsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.AnalyzeColumnsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bucket_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bucket_size(), target);
  }

  // optional int64 sample_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sample_size(), target);
  }

  // optional int64 sketch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sketch_size(), target);
  }

  // repeated .tipb.ColumnInfo columns_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->columns_info(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 cmsketch_depth = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cmsketch_depth(), target);
  }

  // optional int32 cmsketch_width = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cmsketch_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.AnalyzeColumnsReq)
  return target;
}

size_t AnalyzeColumnsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.AnalyzeColumnsReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.ColumnInfo columns_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 bucket_size = 1;
    if (has_bucket_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bucket_size());
    }

    // optional int64 sample_size = 2;
    if (has_sample_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sample_size());
    }

    // optional int64 sketch_size = 3;
    if (has_sketch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sketch_size());
    }

    // optional int32 cmsketch_depth = 5;
    if (has_cmsketch_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmsketch_depth());
    }

    // optional int32 cmsketch_width = 6;
    if (has_cmsketch_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmsketch_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeColumnsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.AnalyzeColumnsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeColumnsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeColumnsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.AnalyzeColumnsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.AnalyzeColumnsReq)
    MergeFrom(*source);
  }
}

void AnalyzeColumnsReq::MergeFrom(const AnalyzeColumnsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.AnalyzeColumnsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_info_.MergeFrom(from.columns_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      bucket_size_ = from.bucket_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      sample_size_ = from.sample_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      sketch_size_ = from.sketch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmsketch_depth_ = from.cmsketch_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmsketch_width_ = from.cmsketch_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnalyzeColumnsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.AnalyzeColumnsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeColumnsReq::CopyFrom(const AnalyzeColumnsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.AnalyzeColumnsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeColumnsReq::IsInitialized() const {
  return true;
}

void AnalyzeColumnsReq::Swap(AnalyzeColumnsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeColumnsReq::InternalSwap(AnalyzeColumnsReq* other) {
  using std::swap;
  columns_info_.InternalSwap(&other->columns_info_);
  swap(bucket_size_, other->bucket_size_);
  swap(sample_size_, other->sample_size_);
  swap(sketch_size_, other->sketch_size_);
  swap(cmsketch_depth_, other->cmsketch_depth_);
  swap(cmsketch_width_, other->cmsketch_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeColumnsReq::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeColumnsResp::InitAsDefaultInstance() {
  ::tipb::_AnalyzeColumnsResp_default_instance_._instance.get_mutable()->pk_hist_ = const_cast< ::tipb::Histogram*>(
      ::tipb::Histogram::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeColumnsResp::kCollectorsFieldNumber;
const int AnalyzeColumnsResp::kPkHistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeColumnsResp::AnalyzeColumnsResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsAnalyzeColumnsResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.AnalyzeColumnsResp)
}
AnalyzeColumnsResp::AnalyzeColumnsResp(const AnalyzeColumnsResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pk_hist()) {
    pk_hist_ = new ::tipb::Histogram(*from.pk_hist_);
  } else {
    pk_hist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tipb.AnalyzeColumnsResp)
}

void AnalyzeColumnsResp::SharedCtor() {
  _cached_size_ = 0;
  pk_hist_ = NULL;
}

AnalyzeColumnsResp::~AnalyzeColumnsResp() {
  // @@protoc_insertion_point(destructor:tipb.AnalyzeColumnsResp)
  SharedDtor();
}

void AnalyzeColumnsResp::SharedDtor() {
  if (this != internal_default_instance()) delete pk_hist_;
}

void AnalyzeColumnsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeColumnsResp::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeColumnsResp& AnalyzeColumnsResp::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsAnalyzeColumnsResp();
  return *internal_default_instance();
}

AnalyzeColumnsResp* AnalyzeColumnsResp::New(::google::protobuf::Arena* arena) const {
  AnalyzeColumnsResp* n = new AnalyzeColumnsResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeColumnsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.AnalyzeColumnsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pk_hist_ != NULL);
    pk_hist_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnalyzeColumnsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.AnalyzeColumnsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tipb.SampleCollector collectors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_collectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.Histogram pk_hist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pk_hist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.AnalyzeColumnsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.AnalyzeColumnsResp)
  return false;
#undef DO_
}

void AnalyzeColumnsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.AnalyzeColumnsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.SampleCollector collectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->collectors(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .tipb.Histogram pk_hist = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pk_hist_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.AnalyzeColumnsResp)
}

::google::protobuf::uint8* AnalyzeColumnsResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.AnalyzeColumnsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.SampleCollector collectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->collectors(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .tipb.Histogram pk_hist = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->pk_hist_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.AnalyzeColumnsResp)
  return target;
}

size_t AnalyzeColumnsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.AnalyzeColumnsResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.SampleCollector collectors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->collectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->collectors(static_cast<int>(i)));
    }
  }

  // optional .tipb.Histogram pk_hist = 2;
  if (has_pk_hist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pk_hist_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeColumnsResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.AnalyzeColumnsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeColumnsResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeColumnsResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.AnalyzeColumnsResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.AnalyzeColumnsResp)
    MergeFrom(*source);
  }
}

void AnalyzeColumnsResp::MergeFrom(const AnalyzeColumnsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.AnalyzeColumnsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from.has_pk_hist()) {
    mutable_pk_hist()->::tipb::Histogram::MergeFrom(from.pk_hist());
  }
}

void AnalyzeColumnsResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.AnalyzeColumnsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeColumnsResp::CopyFrom(const AnalyzeColumnsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.AnalyzeColumnsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeColumnsResp::IsInitialized() const {
  return true;
}

void AnalyzeColumnsResp::Swap(AnalyzeColumnsResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeColumnsResp::InternalSwap(AnalyzeColumnsResp* other) {
  using std::swap;
  collectors_.InternalSwap(&other->collectors_);
  swap(pk_hist_, other->pk_hist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeColumnsResp::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeIndexResp::InitAsDefaultInstance() {
  ::tipb::_AnalyzeIndexResp_default_instance_._instance.get_mutable()->hist_ = const_cast< ::tipb::Histogram*>(
      ::tipb::Histogram::internal_default_instance());
  ::tipb::_AnalyzeIndexResp_default_instance_._instance.get_mutable()->cms_ = const_cast< ::tipb::CMSketch*>(
      ::tipb::CMSketch::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeIndexResp::kHistFieldNumber;
const int AnalyzeIndexResp::kCmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeIndexResp::AnalyzeIndexResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsAnalyzeIndexResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.AnalyzeIndexResp)
}
AnalyzeIndexResp::AnalyzeIndexResp(const AnalyzeIndexResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hist()) {
    hist_ = new ::tipb::Histogram(*from.hist_);
  } else {
    hist_ = NULL;
  }
  if (from.has_cms()) {
    cms_ = new ::tipb::CMSketch(*from.cms_);
  } else {
    cms_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tipb.AnalyzeIndexResp)
}

void AnalyzeIndexResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cms_) -
      reinterpret_cast<char*>(&hist_)) + sizeof(cms_));
}

AnalyzeIndexResp::~AnalyzeIndexResp() {
  // @@protoc_insertion_point(destructor:tipb.AnalyzeIndexResp)
  SharedDtor();
}

void AnalyzeIndexResp::SharedDtor() {
  if (this != internal_default_instance()) delete hist_;
  if (this != internal_default_instance()) delete cms_;
}

void AnalyzeIndexResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeIndexResp::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeIndexResp& AnalyzeIndexResp::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsAnalyzeIndexResp();
  return *internal_default_instance();
}

AnalyzeIndexResp* AnalyzeIndexResp::New(::google::protobuf::Arena* arena) const {
  AnalyzeIndexResp* n = new AnalyzeIndexResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeIndexResp::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.AnalyzeIndexResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hist_ != NULL);
      hist_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cms_ != NULL);
      cms_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnalyzeIndexResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.AnalyzeIndexResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tipb.Histogram hist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.CMSketch cms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.AnalyzeIndexResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.AnalyzeIndexResp)
  return false;
#undef DO_
}

void AnalyzeIndexResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.AnalyzeIndexResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tipb.Histogram hist = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hist_, output);
  }

  // optional .tipb.CMSketch cms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cms_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.AnalyzeIndexResp)
}

::google::protobuf::uint8* AnalyzeIndexResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.AnalyzeIndexResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tipb.Histogram hist = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->hist_, deterministic, target);
  }

  // optional .tipb.CMSketch cms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->cms_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.AnalyzeIndexResp)
  return target;
}

size_t AnalyzeIndexResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.AnalyzeIndexResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .tipb.Histogram hist = 1;
    if (has_hist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->hist_);
    }

    // optional .tipb.CMSketch cms = 2;
    if (has_cms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->cms_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeIndexResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.AnalyzeIndexResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeIndexResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeIndexResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.AnalyzeIndexResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.AnalyzeIndexResp)
    MergeFrom(*source);
  }
}

void AnalyzeIndexResp::MergeFrom(const AnalyzeIndexResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.AnalyzeIndexResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hist()->::tipb::Histogram::MergeFrom(from.hist());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cms()->::tipb::CMSketch::MergeFrom(from.cms());
    }
  }
}

void AnalyzeIndexResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.AnalyzeIndexResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeIndexResp::CopyFrom(const AnalyzeIndexResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.AnalyzeIndexResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeIndexResp::IsInitialized() const {
  return true;
}

void AnalyzeIndexResp::Swap(AnalyzeIndexResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeIndexResp::InternalSwap(AnalyzeIndexResp* other) {
  using std::swap;
  swap(hist_, other->hist_);
  swap(cms_, other->cms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeIndexResp::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bucket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bucket::kCountFieldNumber;
const int Bucket::kLowerBoundFieldNumber;
const int Bucket::kUpperBoundFieldNumber;
const int Bucket::kRepeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bucket::Bucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsBucket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.Bucket)
}
Bucket::Bucket(const Bucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lower_bound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lower_bound()) {
    lower_bound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lower_bound_);
  }
  upper_bound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upper_bound()) {
    upper_bound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upper_bound_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeats_) -
    reinterpret_cast<char*>(&count_)) + sizeof(repeats_));
  // @@protoc_insertion_point(copy_constructor:tipb.Bucket)
}

void Bucket::SharedCtor() {
  _cached_size_ = 0;
  lower_bound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_bound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeats_) -
      reinterpret_cast<char*>(&count_)) + sizeof(repeats_));
}

Bucket::~Bucket() {
  // @@protoc_insertion_point(destructor:tipb.Bucket)
  SharedDtor();
}

void Bucket::SharedDtor() {
  lower_bound_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_bound_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Bucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bucket::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bucket& Bucket::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsBucket();
  return *internal_default_instance();
}

Bucket* Bucket::New(::google::protobuf::Arena* arena) const {
  Bucket* n = new Bucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!lower_bound_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lower_bound_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!upper_bound_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*upper_bound_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&repeats_) -
        reinterpret_cast<char*>(&count_)) + sizeof(repeats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.Bucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lower_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lower_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes upper_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_upper_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 repeats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_repeats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &repeats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.Bucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.Bucket)
  return false;
#undef DO_
}

void Bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 count = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // optional bytes lower_bound = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->lower_bound(), output);
  }

  // optional bytes upper_bound = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->upper_bound(), output);
  }

  // optional int64 repeats = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->repeats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.Bucket)
}

::google::protobuf::uint8* Bucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // optional bytes lower_bound = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->lower_bound(), target);
  }

  // optional bytes upper_bound = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->upper_bound(), target);
  }

  // optional int64 repeats = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->repeats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.Bucket)
  return target;
}

size_t Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.Bucket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes lower_bound = 2;
    if (has_lower_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lower_bound());
    }

    // optional bytes upper_bound = 3;
    if (has_upper_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->upper_bound());
    }

    // optional int64 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

    // optional int64 repeats = 4;
    if (has_repeats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->repeats());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  const Bucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.Bucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.Bucket)
    MergeFrom(*source);
  }
}

void Bucket::MergeFrom(const Bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lower_bound();
      lower_bound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lower_bound_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_upper_bound();
      upper_bound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upper_bound_);
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      repeats_ = from.repeats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bucket::CopyFrom(const Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bucket::IsInitialized() const {
  return true;
}

void Bucket::Swap(Bucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bucket::InternalSwap(Bucket* other) {
  using std::swap;
  lower_bound_.Swap(&other->lower_bound_);
  upper_bound_.Swap(&other->upper_bound_);
  swap(count_, other->count_);
  swap(repeats_, other->repeats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bucket::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Histogram::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histogram::kNdvFieldNumber;
const int Histogram::kBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histogram::Histogram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsHistogram();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.Histogram)
}
Histogram::Histogram(const Histogram& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ndv_ = from.ndv_;
  // @@protoc_insertion_point(copy_constructor:tipb.Histogram)
}

void Histogram::SharedCtor() {
  _cached_size_ = 0;
  ndv_ = GOOGLE_LONGLONG(0);
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:tipb.Histogram)
  SharedDtor();
}

void Histogram::SharedDtor() {
}

void Histogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Histogram::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Histogram& Histogram::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsHistogram();
  return *internal_default_instance();
}

Histogram* Histogram::New(::google::protobuf::Arena* arena) const {
  Histogram* n = new Histogram;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  ndv_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Histogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.Histogram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ndv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ndv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ndv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tipb.Bucket buckets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.Histogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.Histogram)
  return false;
#undef DO_
}

void Histogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 ndv = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ndv(), output);
  }

  // repeated .tipb.Bucket buckets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buckets(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.Histogram)
}

::google::protobuf::uint8* Histogram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 ndv = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ndv(), target);
  }

  // repeated .tipb.Bucket buckets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->buckets(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.Histogram)
  return target;
}

size_t Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.Histogram)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.Bucket buckets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buckets(static_cast<int>(i)));
    }
  }

  // optional int64 ndv = 1;
  if (has_ndv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ndv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Histogram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  const Histogram* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Histogram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.Histogram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.Histogram)
    MergeFrom(*source);
  }
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
  if (from.has_ndv()) {
    set_ndv(from.ndv());
  }
}

void Histogram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {
  return true;
}

void Histogram::Swap(Histogram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histogram::InternalSwap(Histogram* other) {
  using std::swap;
  buckets_.InternalSwap(&other->buckets_);
  swap(ndv_, other->ndv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Histogram::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FMSketch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FMSketch::kMaskFieldNumber;
const int FMSketch::kHashsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FMSketch::FMSketch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsFMSketch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.FMSketch)
}
FMSketch::FMSketch(const FMSketch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hashset_(from.hashset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mask_ = from.mask_;
  // @@protoc_insertion_point(copy_constructor:tipb.FMSketch)
}

void FMSketch::SharedCtor() {
  _cached_size_ = 0;
  mask_ = GOOGLE_ULONGLONG(0);
}

FMSketch::~FMSketch() {
  // @@protoc_insertion_point(destructor:tipb.FMSketch)
  SharedDtor();
}

void FMSketch::SharedDtor() {
}

void FMSketch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMSketch::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FMSketch& FMSketch::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsFMSketch();
  return *internal_default_instance();
}

FMSketch* FMSketch::New(::google::protobuf::Arena* arena) const {
  FMSketch* n = new FMSketch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FMSketch::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.FMSketch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashset_.Clear();
  mask_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FMSketch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.FMSketch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 hashset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_hashset())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_hashset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.FMSketch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.FMSketch)
  return false;
#undef DO_
}

void FMSketch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.FMSketch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 mask = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mask(), output);
  }

  // repeated uint64 hashset = 2;
  for (int i = 0, n = this->hashset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->hashset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.FMSketch)
}

::google::protobuf::uint8* FMSketch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.FMSketch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mask(), target);
  }

  // repeated uint64 hashset = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->hashset_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.FMSketch)
  return target;
}

size_t FMSketch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.FMSketch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 hashset = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->hashset_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hashset_size());
    total_size += data_size;
  }

  // optional uint64 mask = 1;
  if (has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMSketch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.FMSketch)
  GOOGLE_DCHECK_NE(&from, this);
  const FMSketch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FMSketch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.FMSketch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.FMSketch)
    MergeFrom(*source);
  }
}

void FMSketch::MergeFrom(const FMSketch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.FMSketch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashset_.MergeFrom(from.hashset_);
  if (from.has_mask()) {
    set_mask(from.mask());
  }
}

void FMSketch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.FMSketch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMSketch::CopyFrom(const FMSketch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.FMSketch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMSketch::IsInitialized() const {
  return true;
}

void FMSketch::Swap(FMSketch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FMSketch::InternalSwap(FMSketch* other) {
  using std::swap;
  hashset_.InternalSwap(&other->hashset_);
  swap(mask_, other->mask_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FMSketch::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SampleCollector::InitAsDefaultInstance() {
  ::tipb::_SampleCollector_default_instance_._instance.get_mutable()->fm_sketch_ = const_cast< ::tipb::FMSketch*>(
      ::tipb::FMSketch::internal_default_instance());
  ::tipb::_SampleCollector_default_instance_._instance.get_mutable()->cm_sketch_ = const_cast< ::tipb::CMSketch*>(
      ::tipb::CMSketch::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleCollector::kSamplesFieldNumber;
const int SampleCollector::kNullCountFieldNumber;
const int SampleCollector::kCountFieldNumber;
const int SampleCollector::kFmSketchFieldNumber;
const int SampleCollector::kCmSketchFieldNumber;
const int SampleCollector::kTotalSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleCollector::SampleCollector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsSampleCollector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.SampleCollector)
}
SampleCollector::SampleCollector(const SampleCollector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fm_sketch()) {
    fm_sketch_ = new ::tipb::FMSketch(*from.fm_sketch_);
  } else {
    fm_sketch_ = NULL;
  }
  if (from.has_cm_sketch()) {
    cm_sketch_ = new ::tipb::CMSketch(*from.cm_sketch_);
  } else {
    cm_sketch_ = NULL;
  }
  ::memcpy(&null_count_, &from.null_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_size_) -
    reinterpret_cast<char*>(&null_count_)) + sizeof(total_size_));
  // @@protoc_insertion_point(copy_constructor:tipb.SampleCollector)
}

void SampleCollector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fm_sketch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_size_) -
      reinterpret_cast<char*>(&fm_sketch_)) + sizeof(total_size_));
}

SampleCollector::~SampleCollector() {
  // @@protoc_insertion_point(destructor:tipb.SampleCollector)
  SharedDtor();
}

void SampleCollector::SharedDtor() {
  if (this != internal_default_instance()) delete fm_sketch_;
  if (this != internal_default_instance()) delete cm_sketch_;
}

void SampleCollector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleCollector::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampleCollector& SampleCollector::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsSampleCollector();
  return *internal_default_instance();
}

SampleCollector* SampleCollector::New(::google::protobuf::Arena* arena) const {
  SampleCollector* n = new SampleCollector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleCollector::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.SampleCollector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fm_sketch_ != NULL);
      fm_sketch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cm_sketch_ != NULL);
      cm_sketch_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&null_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_size_) -
        reinterpret_cast<char*>(&null_count_)) + sizeof(total_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SampleCollector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.SampleCollector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes samples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 null_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_null_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &null_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.FMSketch fm_sketch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fm_sketch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tipb.CMSketch cm_sketch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cm_sketch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_total_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.SampleCollector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.SampleCollector)
  return false;
#undef DO_
}

void SampleCollector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.SampleCollector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes samples = 1;
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->samples(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 null_count = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->null_count(), output);
  }

  // optional int64 count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

  // optional .tipb.FMSketch fm_sketch = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->fm_sketch_, output);
  }

  // optional .tipb.CMSketch cm_sketch = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cm_sketch_, output);
  }

  // optional int64 total_size = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.SampleCollector)
}

::google::protobuf::uint8* SampleCollector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.SampleCollector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes samples = 1;
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->samples(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 null_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->null_count(), target);
  }

  // optional int64 count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }

  // optional .tipb.FMSketch fm_sketch = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->fm_sketch_, deterministic, target);
  }

  // optional .tipb.CMSketch cm_sketch = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->cm_sketch_, deterministic, target);
  }

  // optional int64 total_size = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.SampleCollector)
  return target;
}

size_t SampleCollector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.SampleCollector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes samples = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->samples_size());
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->samples(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .tipb.FMSketch fm_sketch = 4;
    if (has_fm_sketch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->fm_sketch_);
    }

    // optional .tipb.CMSketch cm_sketch = 5;
    if (has_cm_sketch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->cm_sketch_);
    }

    // optional int64 null_count = 2;
    if (has_null_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->null_count());
    }

    // optional int64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

    // optional int64 total_size = 6;
    if (has_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleCollector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.SampleCollector)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleCollector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleCollector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.SampleCollector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.SampleCollector)
    MergeFrom(*source);
  }
}

void SampleCollector::MergeFrom(const SampleCollector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.SampleCollector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fm_sketch()->::tipb::FMSketch::MergeFrom(from.fm_sketch());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cm_sketch()->::tipb::CMSketch::MergeFrom(from.cm_sketch());
    }
    if (cached_has_bits & 0x00000004u) {
      null_count_ = from.null_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_size_ = from.total_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SampleCollector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.SampleCollector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleCollector::CopyFrom(const SampleCollector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.SampleCollector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleCollector::IsInitialized() const {
  return true;
}

void SampleCollector::Swap(SampleCollector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleCollector::InternalSwap(SampleCollector* other) {
  using std::swap;
  samples_.InternalSwap(&other->samples_);
  swap(fm_sketch_, other->fm_sketch_);
  swap(cm_sketch_, other->cm_sketch_);
  swap(null_count_, other->null_count_);
  swap(count_, other->count_);
  swap(total_size_, other->total_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleCollector::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMSketchRow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMSketchRow::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMSketchRow::CMSketchRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsCMSketchRow();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.CMSketchRow)
}
CMSketchRow::CMSketchRow(const CMSketchRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      counters_(from.counters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tipb.CMSketchRow)
}

void CMSketchRow::SharedCtor() {
  _cached_size_ = 0;
}

CMSketchRow::~CMSketchRow() {
  // @@protoc_insertion_point(destructor:tipb.CMSketchRow)
  SharedDtor();
}

void CMSketchRow::SharedDtor() {
}

void CMSketchRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMSketchRow::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMSketchRow& CMSketchRow::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsCMSketchRow();
  return *internal_default_instance();
}

CMSketchRow* CMSketchRow::New(::google::protobuf::Arena* arena) const {
  CMSketchRow* n = new CMSketchRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMSketchRow::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.CMSketchRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counters_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMSketchRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.CMSketchRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 counters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_counters())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.CMSketchRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.CMSketchRow)
  return false;
#undef DO_
}

void CMSketchRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.CMSketchRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 counters = 1;
  for (int i = 0, n = this->counters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->counters(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.CMSketchRow)
}

::google::protobuf::uint8* CMSketchRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.CMSketchRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 counters = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->counters_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.CMSketchRow)
  return target;
}

size_t CMSketchRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.CMSketchRow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 counters = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->counters_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->counters_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMSketchRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.CMSketchRow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSketchRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMSketchRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.CMSketchRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.CMSketchRow)
    MergeFrom(*source);
  }
}

void CMSketchRow::MergeFrom(const CMSketchRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.CMSketchRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counters_.MergeFrom(from.counters_);
}

void CMSketchRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.CMSketchRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSketchRow::CopyFrom(const CMSketchRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.CMSketchRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSketchRow::IsInitialized() const {
  return true;
}

void CMSketchRow::Swap(CMSketchRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMSketchRow::InternalSwap(CMSketchRow* other) {
  using std::swap;
  counters_.InternalSwap(&other->counters_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMSketchRow::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMSketchTopN::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMSketchTopN::kDataFieldNumber;
const int CMSketchTopN::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMSketchTopN::CMSketchTopN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsCMSketchTopN();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.CMSketchTopN)
}
CMSketchTopN::CMSketchTopN(const CMSketchTopN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:tipb.CMSketchTopN)
}

void CMSketchTopN::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_ULONGLONG(0);
}

CMSketchTopN::~CMSketchTopN() {
  // @@protoc_insertion_point(destructor:tipb.CMSketchTopN)
  SharedDtor();
}

void CMSketchTopN::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMSketchTopN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMSketchTopN::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMSketchTopN& CMSketchTopN::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsCMSketchTopN();
  return *internal_default_instance();
}

CMSketchTopN* CMSketchTopN::New(::google::protobuf::Arena* arena) const {
  CMSketchTopN* n = new CMSketchTopN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMSketchTopN::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.CMSketchTopN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  count_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMSketchTopN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.CMSketchTopN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.CMSketchTopN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.CMSketchTopN)
  return false;
#undef DO_
}

void CMSketchTopN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.CMSketchTopN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional uint64 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.CMSketchTopN)
}

::google::protobuf::uint8* CMSketchTopN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.CMSketchTopN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional uint64 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.CMSketchTopN)
  return target;
}

size_t CMSketchTopN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.CMSketchTopN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMSketchTopN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.CMSketchTopN)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSketchTopN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMSketchTopN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.CMSketchTopN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.CMSketchTopN)
    MergeFrom(*source);
  }
}

void CMSketchTopN::MergeFrom(const CMSketchTopN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.CMSketchTopN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMSketchTopN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.CMSketchTopN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSketchTopN::CopyFrom(const CMSketchTopN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.CMSketchTopN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSketchTopN::IsInitialized() const {
  return true;
}

void CMSketchTopN::Swap(CMSketchTopN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMSketchTopN::InternalSwap(CMSketchTopN* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMSketchTopN::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMSketch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMSketch::kRowsFieldNumber;
const int CMSketch::kTopNFieldNumber;
const int CMSketch::kDefaultValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMSketch::CMSketch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_analyze_2eproto::InitDefaultsCMSketch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tipb.CMSketch)
}
CMSketch::CMSketch(const CMSketch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rows_(from.rows_),
      top_n_(from.top_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  default_value_ = from.default_value_;
  // @@protoc_insertion_point(copy_constructor:tipb.CMSketch)
}

void CMSketch::SharedCtor() {
  _cached_size_ = 0;
  default_value_ = GOOGLE_ULONGLONG(0);
}

CMSketch::~CMSketch() {
  // @@protoc_insertion_point(destructor:tipb.CMSketch)
  SharedDtor();
}

void CMSketch::SharedDtor() {
}

void CMSketch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMSketch::descriptor() {
  ::protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMSketch& CMSketch::default_instance() {
  ::protobuf_analyze_2eproto::InitDefaultsCMSketch();
  return *internal_default_instance();
}

CMSketch* CMSketch::New(::google::protobuf::Arena* arena) const {
  CMSketch* n = new CMSketch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMSketch::Clear() {
// @@protoc_insertion_point(message_clear_start:tipb.CMSketch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  top_n_.Clear();
  default_value_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMSketch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tipb.CMSketch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tipb.CMSketchRow rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tipb.CMSketchTopN top_n = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_top_n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 default_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_default_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tipb.CMSketch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tipb.CMSketch)
  return false;
#undef DO_
}

void CMSketch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tipb.CMSketch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.CMSketchRow rows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rows(static_cast<int>(i)), output);
  }

  // repeated .tipb.CMSketchTopN top_n = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->top_n_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->top_n(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 default_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->default_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tipb.CMSketch)
}

::google::protobuf::uint8* CMSketch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tipb.CMSketch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tipb.CMSketchRow rows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rows(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tipb.CMSketchTopN top_n = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->top_n_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->top_n(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 default_value = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->default_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tipb.CMSketch)
  return target;
}

size_t CMSketch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tipb.CMSketch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tipb.CMSketchRow rows = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  // repeated .tipb.CMSketchTopN top_n = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->top_n_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->top_n(static_cast<int>(i)));
    }
  }

  // optional uint64 default_value = 3;
  if (has_default_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->default_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMSketch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tipb.CMSketch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSketch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMSketch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tipb.CMSketch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tipb.CMSketch)
    MergeFrom(*source);
  }
}

void CMSketch::MergeFrom(const CMSketch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tipb.CMSketch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  top_n_.MergeFrom(from.top_n_);
  if (from.has_default_value()) {
    set_default_value(from.default_value());
  }
}

void CMSketch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tipb.CMSketch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSketch::CopyFrom(const CMSketch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tipb.CMSketch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSketch::IsInitialized() const {
  return true;
}

void CMSketch::Swap(CMSketch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMSketch::InternalSwap(CMSketch* other) {
  using std::swap;
  rows_.InternalSwap(&other->rows_);
  top_n_.InternalSwap(&other->top_n_);
  swap(default_value_, other->default_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMSketch::GetMetadata() const {
  protobuf_analyze_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_analyze_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tipb

// @@protoc_insertion_point(global_scope)
